/**
 * @license MIT
 * https://github.com/sotrox/taipa
 * v0.10.1
 */
var Taipa=function(t){"use strict";class e{constructor(t){this.character=t}}const a=new class{constructor(){this.carr=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"],this.o=new Map;for(const t of this.carr)this.assign(t)}assign(t){this.o.set(t,new e(t))}get(t){const a=this.o.get(t);return a||new e("")}get size(){return this.o.size}};class n extends class{}{constructor(t){super(),this.letter=t}}class s extends class{constructor(){this.literal=""}}{constructor(t){super(),this.characters=new Array,t&&(this.characters=t,this.concat())}pushCharacter(t){this.characters.push(t),this.concat()}concat(){this.literal=this.characters.map((t=>t?t.character:"")).join("")}}class r{constructor(){this.characters=new Array}get matchedLength(){return this.characters.length}toString(){let t="";for(const e in this.characters)t+=this.characters[e].character;return t}}class g{constructor(t){this.o=new Map,this.arr=t;for(let t=0;t<this.arr.length;t++)this.assign(this.arr[t])}assign(t){const e=[];for(let n=0;n<t.length;n++){let s=a.get(t[n]);s&&e.push(s)}this.o.set(t,new s(e))}handleN(t,e,a){return new r}get(t){const e=this.o.get(t);return e||new s([])}get size(){return this.o.size}get values(){return this.o.values()}}class o{constructor(t){this.lowerLetters=t,this.listOfLetters=new Array,this.listOfLetters=Array.from(t.values)}makeGraphemes(t){const a=new Array;if(t)for(let n=0;n<t.length;n++)"\0"!=t.charAt(n)&&a.push(new e(t.charAt(n)));return this.make(a)}getMatchedSequence(t,e,a){let n=new r,s=0;if("n"===t[e].character&&(n=this.lowerLetters.handleN(t,e,this.listOfLetters.length),n.matchedLength>0))return n;for(const r in a){const g=Math.min(t.length-e,a[r].literal.length);if(a[r].literal.length==g)for(let o=0;o<g&&t[e+o].character===a[r].literal[o];o++)if(o+1==g&&g>s){s=g;for(let a=0;a<s;a++)n.characters[a]=t[e+a]}}return n}make(t){const e=new Array;let a=0;const r=new Array;for(let g=0;g<t.length;g++){if(g-a==0){const e=this.listOfLetters.filter((e=>e.characters[0].character===t[g].character)),n=this.getMatchedSequence(t,a,e);if(n.matchedLength>0)for(const t in e)e[t].literal===new s(n.characters).literal&&r.push(e[t])}if(0==r.length);else if(1==r.length&&g+1-a==r[0].characters.length){const t=r.shift();if(t){a+=t.characters.length;const s=new n(t);e.push(s)}}}return e}}class l{constructor(){this.name="",this.characters=new Array}toString(){let t="";if(null!=this.characters)for(let e in this.characters)t+=this.characters[e].character;return t}makeCharacters(t){const a=new Array;for(let n=0;n<t.length;n++)a.push(new e(t[n]));return a}}const i=function(t){return{sounds:t,includes(t){for(let e in this.sounds)if(t&&this.sounds[e]&&t===this.sounds[e].toString())return!0;return!1}}},T=(...t)=>e=>t.reduce(((t,e)=>e(t)),e);class h{constructor(){this.letters=[],this.matchedSounds=new Array,this.matching=!0,this.predictive=!1,this.predictions=new Array,this.predictSandhiFinalConsonant=!1}}class c{constructor(){this.letters=new Array,this.pattern=new Array}get matchedLength(){return this.letters.length}get lastLetter(){return this.letters.length>0?this.letters[this.letters.length-1]:new s([])}get lastSecondLetter(){return this.letters.length>1?this.letters[this.letters.length-2]:new s([])}}class L{}class u{constructor(t){this.literal="",this.letters=new Array,t&&(this.letters=t,this.concat())}pushLetter(t){this.letters.push(t),this.concat()}replaceLetter(t,e){this.letters.splice(t,1,e),this.concat()}insertLetter(t,e){this.letters.splice(t,0,e),this.concat()}concat(){this.literal=this.letters.map((t=>t?t.literal:"")).join("")}}function p(t,e){const a=new Array;let n=0;for(let s=0;s<t.length;s++){let r=new c;if(s-n==0){if(r=e(t,n),r.matchedLength,r.letters.length>0){for(const t in r.letters);a.push(r)}n+=r.matchedLength}if(0==a.length);else if(a.length>=1){if(null==r)break;r.matchedLength>0&&(s+=n-s-1)}}return a}class w{}class K{constructor(){this.literal=""}}class m{}class d extends class{}{constructor(){super(...arguments),this.tonal=new A}toString(){return this.tonal.toString()}}class k extends d{}class f extends d{constructor(){super(...arguments),this.final=new j}toString(){return this.tonal.toString()?this.final.toString()+this.tonal.toString():this.final.toString()}}class y extends class{}{constructor(){super(...arguments),this.tonal=new A}toString(){return this.tonal.toString()}}var x;t.TonalLetterTags=void 0,(x=t.TonalLetterTags||(t.TonalLetterTags={})).a="a",x.e="e",x.i="i",x.o="o",x.u="u",x.ur="ur",x.c="c",x.ch="ch",x.j="j",x.s="s",x.ph="ph",x.th="th",x.kh="kh",x.m="m",x.n="n",x.ng="ng",x.nn="nn",x.f="f",x.w="w",x.x="x",x.xx="xx",x.y="y",x.z="z",x.zx="zx",x.b="b",x.g="g",x.l="l",x.k="k",x.p="p",x.t="t",x.kk="kk",x.pp="pp",x.tt="tt",x.hh="hh",x.bb="bb",x.gg="gg",x.ll="ll",x.ss="ss",x.h="h",x.zero="zero",x.er="er",x.ir="ir",x.or="or";const S=new class extends g{handleN(t,a,n){let s=new r;return t.length-a>="nng".length&&n==S.size&&"n"===t[a].character&&"n"===t[a+1].character&&"g"===t[a+2].character?(s.characters[0]=new e("n"),s):s}}([t.TonalLetterTags.a,t.TonalLetterTags.e,t.TonalLetterTags.i,t.TonalLetterTags.o,t.TonalLetterTags.u,t.TonalLetterTags.ur,t.TonalLetterTags.c,t.TonalLetterTags.ch,t.TonalLetterTags.j,t.TonalLetterTags.s,t.TonalLetterTags.m,t.TonalLetterTags.n,t.TonalLetterTags.ng,t.TonalLetterTags.nn,t.TonalLetterTags.w,t.TonalLetterTags.xx,t.TonalLetterTags.z,t.TonalLetterTags.zx,t.TonalLetterTags.x,t.TonalLetterTags.y,t.TonalLetterTags.b,t.TonalLetterTags.g,t.TonalLetterTags.l,t.TonalLetterTags.k,t.TonalLetterTags.p,t.TonalLetterTags.t,t.TonalLetterTags.kk,t.TonalLetterTags.pp,t.TonalLetterTags.tt,t.TonalLetterTags.hh,t.TonalLetterTags.bb,t.TonalLetterTags.gg,t.TonalLetterTags.ll,t.TonalLetterTags.ss,t.TonalLetterTags.f,t.TonalLetterTags.h,t.TonalLetterTags.er,t.TonalLetterTags.ir,t.TonalLetterTags.or,t.TonalLetterTags.ph,t.TonalLetterTags.th,t.TonalLetterTags.kh]);var z;t.TonalSoundTags=void 0,(z=t.TonalSoundTags||(t.TonalSoundTags={})).initialConsonant="initialConsonant",z.vowel="vowel",z.nasalization="nasalization",z.stopFinalConsonant="stopFinalConsonant",z.nasalFinalConsonant="nasalFinalConsonant",z.checkedTone="checkedTone",z.freeTone="freeTone";class b extends l{constructor(){super(...arguments),this.name=t.TonalSoundTags.initialConsonant}}class C extends l{constructor(){super(...arguments),this.name=t.TonalSoundTags.vowel}}class j extends l{constructor(){super(...arguments),this.name=""}}class F extends l{constructor(){super(...arguments),this.name=t.TonalSoundTags.nasalization}}class A extends l{constructor(){super(...arguments),this.name=""}}class v extends A{constructor(){super(...arguments),this.name=t.TonalSoundTags.freeTone}}class M extends A{constructor(){super(...arguments),this.name=t.TonalSoundTags.checkedTone}}class P extends j{constructor(){super(...arguments),this.name=t.TonalSoundTags.stopFinalConsonant}}class O extends j{constructor(){super(...arguments),this.name=t.TonalSoundTags.nasalFinalConsonant}}class E extends C{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.a)}}class I extends C{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.e)}}class V extends C{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.i)}}class N extends C{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.o)}}class W extends C{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.u)}}class q extends C{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.ur)}}class G extends C{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.er)}}class U extends C{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.ir)}}class D extends C{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.or)}}class H extends C{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.m)}}class B extends C{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.n)}}class R extends C{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.ng)}}class _ extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.c)}}class J extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.ch)}}class Q extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.j)}}class X extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.l)}}class Y extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.s)}}class Z extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.ph)}}class $ extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.th)}}class tt extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.kh)}}class et extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.h)}}class at extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.p)}}class nt extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.t)}}class st extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.k)}}class rt extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.b)}}class gt extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.g)}}class ot extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.m)}}class lt extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.n)}}class it extends b{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.ng)}}class Tt extends A{constructor(){super(...arguments),this.characters=[]}}class ht extends v{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.z)}}class ct extends v{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.w)}}class Lt extends v{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.f)}}class ut extends v{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.xx)}}class pt extends v{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.zx)}}class wt extends v{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.x)}}class Kt extends v{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.y)}}class mt extends M{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.w)}}class dt extends M{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.f)}}class kt extends M{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.x)}}class ft extends M{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.y)}}class yt extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.p)}}class xt extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.t)}}class St extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.k)}}class zt extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.h)}}class bt extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.pp)}}class Ct extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.tt)}}class jt extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.kk)}}class Ft extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.hh)}}class At extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.b)}}class vt extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.l)}}class Mt extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.g)}}class Pt extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.j)}}class Ot extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.s)}}class Et extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.bb)}}class It extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.ll)}}class Vt extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.gg)}}class Nt extends P{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.ss)}}class Wt extends O{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.m)}}class qt extends O{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.n)}}class Gt extends O{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.ng)}}class Ut extends F{constructor(){super(...arguments),this.characters=this.makeCharacters(t.TonalLetterTags.nn)}}const Dt=i([new Ut]),Ht=i([new Wt,new qt,new Gt]),Bt=i([new zt,new Ft]),Rt=i([new E,new I,new V,new N,new W,new q,new U,new D,new G]),_t=i([new H,new B,new R]),Jt=i([new at,new nt,new st,new rt,new gt,new et,new _,new J,new Q,new X,new Y,new Z,new $,new tt,new ot,new lt,new it]),Qt=i([new ht,new ct,new ut,new Lt,new pt,new wt,new Kt]),Xt=i([new dt,new ft,new mt,new kt]),Yt=i([new yt,new xt,new St,new zt,new bt,new Ct,new jt,new Ft]),Zt=i([new At,new Mt,new Pt,new St,new vt,new yt,new Ot]),$t=i([new Et,new Vt,new jt,new It,new bt,new Nt]);function te(t){return e=>{for(const a in t)if(t[a].name===e)return t[a];return new l}}const ee=te([new E]),ae=te([new rt,new At]),ne=te([new Et]),se=te([new _]),re=te([new J]),ge=te([new I]),oe=te([new G]),le=te([new Lt,new dt]),ie=te([new gt,new Mt]),Te=te([new Vt]),he=te([new et,new zt]),ce=te([new Ft]),Le=te([new V]),ue=te([new U]),pe=te([new Q,new Pt]),we=te([new st,new St]),Ke=te([new tt]),me=te([new jt]),de=te([new X,new vt]),ke=te([new It]),fe=te([new ot,new H,new Wt]),ye=te([new lt,new B,new qt]),xe=te([new Ut]),Se=te([new it,new R,new Gt]),ze=te([new N]),be=te([new D]),Ce=te([new at,new yt]),je=te([new Z]),Fe=te([new bt]),Ae=te([new Y,new Ot]),ve=te([new Nt]),Me=te([new nt,new xt]),Pe=te([new $]),Oe=te([new Ct]),Ee=te([new W]),Ie=te([new q]),Ve=te([new ct,new mt]),Ne=te([new wt,new kt]),We=te([new ut]),qe=te([new Kt,new ft]),Ge=te([new ht]),Ue=te([new pt]),De=(new Map).set(t.TonalLetterTags.a,ee).set(t.TonalLetterTags.b,ae).set(t.TonalLetterTags.bb,ne).set(t.TonalLetterTags.c,se).set(t.TonalLetterTags.ch,re).set(t.TonalLetterTags.e,ge).set(t.TonalLetterTags.er,oe).set(t.TonalLetterTags.f,le).set(t.TonalLetterTags.g,ie).set(t.TonalLetterTags.gg,Te).set(t.TonalLetterTags.h,he).set(t.TonalLetterTags.hh,ce).set(t.TonalLetterTags.i,Le).set(t.TonalLetterTags.ir,ue).set(t.TonalLetterTags.j,pe).set(t.TonalLetterTags.k,we).set(t.TonalLetterTags.kh,Ke).set(t.TonalLetterTags.kk,me).set(t.TonalLetterTags.l,de).set(t.TonalLetterTags.ll,ke).set(t.TonalLetterTags.m,fe).set(t.TonalLetterTags.n,ye).set(t.TonalLetterTags.nn,xe).set(t.TonalLetterTags.ng,Se).set(t.TonalLetterTags.o,ze).set(t.TonalLetterTags.or,be).set(t.TonalLetterTags.p,Ce).set(t.TonalLetterTags.ph,je).set(t.TonalLetterTags.pp,Fe).set(t.TonalLetterTags.s,Ae).set(t.TonalLetterTags.ss,ve).set(t.TonalLetterTags.t,Me).set(t.TonalLetterTags.th,Pe).set(t.TonalLetterTags.tt,Oe).set(t.TonalLetterTags.u,Ee).set(t.TonalLetterTags.ur,Ie).set(t.TonalLetterTags.w,Ve).set(t.TonalLetterTags.x,Ne).set(t.TonalLetterTags.xx,We).set(t.TonalLetterTags.y,qe).set(t.TonalLetterTags.z,Ge).set(t.TonalLetterTags.zx,Ue);class He extends k{constructor(){super(...arguments),this.tonal=new Tt}}class Be extends k{constructor(){super(...arguments),this.tonal=new Lt}}class Re extends k{constructor(){super(...arguments),this.tonal=new ht}}class _e extends k{constructor(){super(...arguments),this.tonal=new Kt}}class Je extends k{constructor(){super(...arguments),this.tonal=new ct}}class Qe extends k{constructor(){super(...arguments),this.tonal=new wt}}class Xe extends k{constructor(){super(...arguments),this.tonal=new ut}}const Ye=(new Map).set(t.TonalLetterTags.f,new Be).set(t.TonalLetterTags.w,new Je).set(t.TonalLetterTags.xx,new Xe).set(t.TonalLetterTags.z,new Re).set(t.TonalLetterTags.zx,new class extends k{constructor(){super(...arguments),this.tonal=new pt}}).set(t.TonalLetterTags.y,new _e).set(t.TonalLetterTags.x,new Qe);class Ze extends f{constructor(){super(...arguments),this.final=new yt}}class $e extends f{constructor(){super(...arguments),this.final=new xt}}class ta extends f{constructor(){super(...arguments),this.final=new St}}class ea extends f{constructor(){super(...arguments),this.final=new zt}}class aa extends f{constructor(){super(...arguments),this.final=new bt}}class na extends f{constructor(){super(...arguments),this.final=new Ct}}class sa extends f{constructor(){super(...arguments),this.final=new jt}}class ra extends f{constructor(){super(...arguments),this.final=new Ft}}class ga extends f{constructor(){super(...arguments),this.final=new yt,this.tonal=new dt}}class oa extends f{constructor(){super(...arguments),this.final=new yt,this.tonal=new mt}}class la extends f{constructor(){super(...arguments),this.final=new xt,this.tonal=new dt}}class ia extends f{constructor(){super(...arguments),this.final=new St,this.tonal=new dt}}class Ta extends f{constructor(){super(...arguments),this.final=new zt,this.tonal=new dt}}class ha extends f{constructor(){super(...arguments),this.final=new zt,this.tonal=new ft}}class ca extends f{constructor(){super(...arguments),this.final=new zt,this.tonal=new mt}}class La extends f{constructor(){super(...arguments),this.final=new xt,this.tonal=new mt}}class ua extends f{constructor(){super(...arguments),this.final=new St,this.tonal=new mt}}class pa extends f{constructor(){super(...arguments),this.final=new yt,this.tonal=new kt}}class wa extends f{constructor(){super(...arguments),this.final=new xt,this.tonal=new kt}}class Ka extends f{constructor(){super(...arguments),this.final=new St,this.tonal=new kt}}class ma extends f{constructor(){super(...arguments),this.final=new zt,this.tonal=new kt}}class da extends f{constructor(){super(...arguments),this.final=new At,this.tonal=new dt}}class ka extends f{constructor(){super(...arguments),this.final=new Mt,this.tonal=new dt}}class fa extends f{constructor(){super(...arguments),this.final=new Pt,this.tonal=new dt}}class ya extends f{constructor(){super(...arguments),this.final=new vt,this.tonal=new dt}}class xa extends f{constructor(){super(...arguments),this.final=new Ot,this.tonal=new dt}}class Sa extends f{constructor(){super(...arguments),this.final=new At,this.tonal=new mt}}class za extends f{constructor(){super(...arguments),this.final=new Mt,this.tonal=new mt}}class ba extends f{constructor(){super(...arguments),this.final=new vt,this.tonal=new mt}}class Ca extends f{constructor(){super(...arguments),this.final=new Ot,this.tonal=new mt}}class ja extends f{constructor(){super(...arguments),this.final=new At,this.tonal=new kt}}class Fa extends f{constructor(){super(...arguments),this.final=new Mt,this.tonal=new kt}}class Aa extends f{constructor(){super(...arguments),this.final=new vt,this.tonal=new kt}}const va=(new Map).set(t.TonalLetterTags.p,new Ze).set(t.TonalLetterTags.t,new $e).set(t.TonalLetterTags.k,new ta).set(t.TonalLetterTags.h,new ea).set(t.TonalLetterTags.b,new class extends f{constructor(){super(...arguments),this.final=new At}}).set(t.TonalLetterTags.g,new class extends f{constructor(){super(...arguments),this.final=new Mt}}).set(t.TonalLetterTags.l,new class extends f{constructor(){super(...arguments),this.final=new vt}}).set(t.TonalLetterTags.pp,new aa).set(t.TonalLetterTags.tt,new na).set(t.TonalLetterTags.kk,new sa).set(t.TonalLetterTags.hh,new ra).set(t.TonalLetterTags.bb,new class extends f{constructor(){super(...arguments),this.final=new Et}}).set(t.TonalLetterTags.gg,new class extends f{constructor(){super(...arguments),this.final=new Vt}}).set(t.TonalLetterTags.ll,new class extends f{constructor(){super(...arguments),this.final=new It}}).set(t.TonalLetterTags.ss,new class extends f{constructor(){super(...arguments),this.final=new Nt}}).set(t.TonalLetterTags.p+t.TonalLetterTags.f,new ga).set(t.TonalLetterTags.t+t.TonalLetterTags.f,new la).set(t.TonalLetterTags.k+t.TonalLetterTags.f,new ia).set(t.TonalLetterTags.h+t.TonalLetterTags.f,new Ta).set(t.TonalLetterTags.b+t.TonalLetterTags.f,new da).set(t.TonalLetterTags.g+t.TonalLetterTags.f,new ka).set(t.TonalLetterTags.j+t.TonalLetterTags.f,new fa).set(t.TonalLetterTags.l+t.TonalLetterTags.f,new ya).set(t.TonalLetterTags.s+t.TonalLetterTags.f,new xa).set(t.TonalLetterTags.h+t.TonalLetterTags.y,new ha).set(t.TonalLetterTags.p+t.TonalLetterTags.w,new oa).set(t.TonalLetterTags.t+t.TonalLetterTags.w,new La).set(t.TonalLetterTags.k+t.TonalLetterTags.w,new ua).set(t.TonalLetterTags.h+t.TonalLetterTags.w,new ca).set(t.TonalLetterTags.b+t.TonalLetterTags.w,new Sa).set(t.TonalLetterTags.g+t.TonalLetterTags.w,new za).set(t.TonalLetterTags.l+t.TonalLetterTags.w,new ba).set(t.TonalLetterTags.s+t.TonalLetterTags.w,new Ca).set(t.TonalLetterTags.p+t.TonalLetterTags.x,new pa).set(t.TonalLetterTags.t+t.TonalLetterTags.x,new wa).set(t.TonalLetterTags.k+t.TonalLetterTags.x,new Ka).set(t.TonalLetterTags.h+t.TonalLetterTags.x,new ma).set(t.TonalLetterTags.b+t.TonalLetterTags.x,new ja).set(t.TonalLetterTags.g+t.TonalLetterTags.x,new Fa).set(t.TonalLetterTags.l+t.TonalLetterTags.x,new Aa),Ma=(new Map).set(t.TonalLetterTags.w,new Je).set(t.TonalLetterTags.z,new Re).set(t.TonalLetterTags.x,new Qe).set(t.TonalLetterTags.y,new _e).set(t.TonalLetterTags.f,new Be).set(t.TonalLetterTags.xx,new Xe),Pa=(new Map).set(t.TonalLetterTags.p,new Ze).set(t.TonalLetterTags.t,new $e).set(t.TonalLetterTags.k,new ta).set(t.TonalLetterTags.h,new ea).set(t.TonalLetterTags.pp,new aa).set(t.TonalLetterTags.tt,new na).set(t.TonalLetterTags.kk,new sa).set(t.TonalLetterTags.hh,new ra),Oa=(new Map).set(t.TonalLetterTags.p+t.TonalLetterTags.f,[new ga]).set(t.TonalLetterTags.p+t.TonalLetterTags.w,[new oa]).set(t.TonalLetterTags.p+t.TonalLetterTags.x,[new pa]).set(t.TonalLetterTags.t+t.TonalLetterTags.f,[new la]).set(t.TonalLetterTags.t+t.TonalLetterTags.w,[new La]).set(t.TonalLetterTags.t+t.TonalLetterTags.x,[new wa]).set(t.TonalLetterTags.k+t.TonalLetterTags.f,[new ia]).set(t.TonalLetterTags.k+t.TonalLetterTags.w,[new ua]).set(t.TonalLetterTags.k+t.TonalLetterTags.x,[new Ka]).set(t.TonalLetterTags.h+t.TonalLetterTags.f,[new Ta]).set(t.TonalLetterTags.h+t.TonalLetterTags.y,[new ha]).set(t.TonalLetterTags.h+t.TonalLetterTags.w,[new ca]).set(t.TonalLetterTags.h+t.TonalLetterTags.x,[new ma]).set(t.TonalLetterTags.b+t.TonalLetterTags.f,[new da]).set(t.TonalLetterTags.b+t.TonalLetterTags.w,[new Sa]).set(t.TonalLetterTags.b+t.TonalLetterTags.x,[new ja]).set(t.TonalLetterTags.g+t.TonalLetterTags.f,[new ka]).set(t.TonalLetterTags.g+t.TonalLetterTags.w,[new za]).set(t.TonalLetterTags.g+t.TonalLetterTags.x,[new Fa]).set(t.TonalLetterTags.j+t.TonalLetterTags.f,[new fa]).set(t.TonalLetterTags.l+t.TonalLetterTags.f,[new ya]).set(t.TonalLetterTags.l+t.TonalLetterTags.w,[new ba]).set(t.TonalLetterTags.l+t.TonalLetterTags.x,[new Aa]).set(t.TonalLetterTags.s+t.TonalLetterTags.f,[new xa]).set(t.TonalLetterTags.s+t.TonalLetterTags.w,[new Ca]),Ea=(new Map).set(t.TonalLetterTags.f,[new Kt]).set(t.TonalLetterTags.w,[new ht,new wt]).set(t.TonalLetterTags.xx,[new ht,new Lt,new wt]).set(t.TonalLetterTags.z,[new Tt,new wt,new Lt]).set(t.TonalLetterTags.zx,[]).set(t.TonalLetterTags.x,[]).set(t.TonalLetterTags.y,[new ct]).set(t.TonalLetterTags.zero,[new Kt]),Ia=(new Map).set(t.TonalLetterTags.f,[new Kt,new ct]).set(t.TonalLetterTags.x,[new Tt,new wt,new ht]);var Va;t.KanaLetterTags=void 0,(Va=t.KanaLetterTags||(t.KanaLetterTags={})).a="a",Va.e="e",Va.i="i",Va.o="o",Va.u="u",Va.b="b",Va.c="c",Va.ch="ch",Va.d="d",Va.f="f",Va.g="g",Va.h="h",Va.j="j",Va.k="k",Va.l="l",Va.m="m",Va.r="r",Va.s="s",Va.v="v",Va.z="z",Va.p="p",Va.t="t",Va.w="w",Va.y="y",Va.n="n",Va.ng="ng";const Na=new class extends g{handleN(t,a,n){let s=new r;return t.length-a>="ng".length&&n==Na.size&&"n"===t[a].character&&"g"===t[a+1].character?"n"===t[0].character&&"g"===t[a+1].character?(s.characters[0]=new e("n"),s.characters[1]=new e("g"),s):(s.characters[0]=new e("n"),s):s}}([t.KanaLetterTags.a,t.KanaLetterTags.e,t.KanaLetterTags.i,t.KanaLetterTags.o,t.KanaLetterTags.u,t.KanaLetterTags.b,t.KanaLetterTags.c,t.KanaLetterTags.ch,t.KanaLetterTags.d,t.KanaLetterTags.f,t.KanaLetterTags.g,t.KanaLetterTags.h,t.KanaLetterTags.j,t.KanaLetterTags.k,t.KanaLetterTags.l,t.KanaLetterTags.m,t.KanaLetterTags.r,t.KanaLetterTags.s,t.KanaLetterTags.v,t.KanaLetterTags.z,t.KanaLetterTags.p,t.KanaLetterTags.t,t.KanaLetterTags.w,t.KanaLetterTags.y,t.KanaLetterTags.n,t.KanaLetterTags.ng]);var Wa;!function(t){t.geminatedConsonant="geminatedConsonant",t.initialConsonant="initialConsonant",t.semivowel="semivowel",t.vowel="vowel",t.finalConsonant="finalConsonant"}(Wa||(Wa={}));class qa extends l{constructor(){super(...arguments),this.name=Wa.geminatedConsonant}}class Ga extends l{constructor(){super(...arguments),this.name=Wa.initialConsonant}}class Ua extends l{constructor(){super(...arguments),this.name=Wa.semivowel}}class Da extends l{constructor(){super(...arguments),this.name=Wa.vowel}}class Ha extends l{constructor(){super(...arguments),this.name=Wa.finalConsonant}}class Ba extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.b)}}class Ra extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.c)}}class _a extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.ch)}}class Ja extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.d)}}class Qa extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.f)}}class Xa extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.g)}}class Ya extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.h)}}class Za extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.j)}}class $a extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.k)}}class tn extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.l)}}class en extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.m)}}class an extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.n)}}class nn extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.ng)}}class sn extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.p)}}class rn extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.r)}}class gn extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.s)}}class on extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.t)}}class ln extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.v)}}class Tn extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.w)}}class hn extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.y)}}class cn extends Ga{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.z)}}class Ln extends Ua{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.w)}}class un extends Ua{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.y)}}class pn extends Da{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.a)}}class wn extends Da{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.e)}}class Kn extends Da{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.i)}}class mn extends Da{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.o)}}class dn extends Da{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.u)}}class kn extends Ha{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.b)}}class fn extends Ha{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.d)}}class yn extends Ha{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.g)}}class xn extends Ha{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.k)}}class Sn extends Ha{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.n)}}class zn extends Ha{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.p)}}class bn extends Ha{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.s)}}class Cn extends Ha{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.t)}}class jn extends qa{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.b)}}class Fn extends qa{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.d)}}class An extends qa{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.g)}}class vn extends qa{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.k)}}class Mn extends qa{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.p)}}class Pn extends qa{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.s)}}class On extends qa{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.t)}}const En=i([new Ba,new Ra,new _a,new Ja,new Qa,new Xa,new Ya,new Za,new $a,new tn,new en,new an,new nn,new sn,new rn,new gn,new on,new ln,new Tn,new hn,new cn]),In=i([new pn,new Kn,new dn,new wn,new mn]),Vn=i([new jn,new Fn,new An,new vn,new Mn,new Pn,new On]),Nn=i([new Ln,new un]),Wn=i([new kn,new fn,new yn,new xn,new Sn,new zn,new bn,new Cn]),qn=i([new Sn]);function Gn(t){return e=>{for(const a in t)if(t[a].name===e)return t[a];return new l}}const Un=Gn([new pn]),Dn=Gn([new Ba,new kn,new jn]),Hn=Gn([new Ra,new class extends qa{constructor(){super(...arguments),this.characters=this.makeCharacters(t.KanaLetterTags.c)}}]),Bn=Gn([new _a]),Rn=Gn([new Ja,new fn,new Fn]),_n=Gn([new wn]),Jn=Gn([new Qa]),Qn=Gn([new Xa,new yn,new An]),Xn=Gn([new Ya]),Yn=Gn([new Kn]),Zn=Gn([new Za]),$n=Gn([new $a,new xn,new vn]),ts=Gn([new tn]),es=Gn([new en]),as=Gn([new an,new Sn]),ns=Gn([new nn]),ss=Gn([new mn]),rs=Gn([new sn,new zn,new Mn]),gs=Gn([new rn]),os=Gn([new gn,new bn,new Pn]),ls=Gn([new on,new Cn,new On]),is=Gn([new dn]),Ts=Gn([new ln]),hs=Gn([new Tn,new Ln]),cs=Gn([new hn,new un]),Ls=Gn([new cn]),us=(new Map).set(t.KanaLetterTags.a,Un).set(t.KanaLetterTags.b,Dn).set(t.KanaLetterTags.c,Hn).set(t.KanaLetterTags.ch,Bn).set(t.KanaLetterTags.d,Rn).set(t.KanaLetterTags.e,_n).set(t.KanaLetterTags.f,Jn).set(t.KanaLetterTags.g,Qn).set(t.KanaLetterTags.h,Xn).set(t.KanaLetterTags.i,Yn).set(t.KanaLetterTags.j,Zn).set(t.KanaLetterTags.k,$n).set(t.KanaLetterTags.l,ts).set(t.KanaLetterTags.m,es).set(t.KanaLetterTags.n,as).set(t.KanaLetterTags.ng,ns).set(t.KanaLetterTags.o,ss).set(t.KanaLetterTags.p,rs).set(t.KanaLetterTags.r,gs).set(t.KanaLetterTags.s,os).set(t.KanaLetterTags.t,ls).set(t.KanaLetterTags.u,is).set(t.KanaLetterTags.v,Ts).set(t.KanaLetterTags.w,hs).set(t.KanaLetterTags.y,cs).set(t.KanaLetterTags.z,Ls),ps=(new Map).set(t.KanaLetterTags.ch+t.KanaLetterTags.u,["っ","ッ"]),ws=(new Map).set(t.KanaLetterTags.n,["ん","ン"]),Ks=(new Map).set(t.KanaLetterTags.a,["ぁ","ァ"]).set(t.KanaLetterTags.i,["ぃ","ィ"]).set(t.KanaLetterTags.u,["ぅ","ゥ"]).set(t.KanaLetterTags.e,["ぇ","ェ"]).set(t.KanaLetterTags.o,["ぉ","ォ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.a,["","ㇵ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.i,["","ㇶ"]).set(t.KanaLetterTags.f+t.KanaLetterTags.u,["","ㇷ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.e,["","ㇸ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.o,["","ㇹ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.a,["ゕ","ヵ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.e,["ゖ","ヶ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.u,["","ㇰ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.a,["","ㇻ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.i,["","ㇼ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.u,["","ㇽ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.e,["","ㇾ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.o,["","ㇿ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.u,["","ㇺ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.u,["","ㇴ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.u,["","ㇷ゚"]).set(t.KanaLetterTags.s+t.KanaLetterTags.i,["","ㇱ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.u,["","ㇲ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.o,["","ㇳ"]).set(t.KanaLetterTags.y+t.KanaLetterTags.a,["ゃ","ャ"]).set(t.KanaLetterTags.y+t.KanaLetterTags.u,["ゅ","ュ"]).set(t.KanaLetterTags.y+t.KanaLetterTags.o,["ょ","ョ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.a,["ゎ","ヮ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.o,["","𛅦"]).set(t.KanaLetterTags.b+t.KanaLetterTags.u,["","ㇷ゙"]).set(t.KanaLetterTags.g+t.KanaLetterTags.u,["","ㇰ゙"]).set(t.KanaLetterTags.j+t.KanaLetterTags.u,["","ㇲ゙"]).set(t.KanaLetterTags.n,["","𛅧"]).set(t.KanaLetterTags.j+t.KanaLetterTags.i,["ぢ","ヂ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.u,["づ","ヅ"]),ms=(new Map).set(t.KanaLetterTags.a,["あ","ア"]).set(t.KanaLetterTags.i,["い","イ"]).set(t.KanaLetterTags.u,["う","ウ"]).set(t.KanaLetterTags.e,["え","エ"]).set(t.KanaLetterTags.o,["お","オ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.a,["か","カ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.i,["き","キ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.u,["く","ク"]).set(t.KanaLetterTags.k+t.KanaLetterTags.e,["け","ケ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.o,["こ","コ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.a,["さ","サ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.i,["し","シ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.u,["す","ス"]).set(t.KanaLetterTags.s+t.KanaLetterTags.e,["せ","セ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.o,["そ","ソ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.a,["た","タ"]).set(t.KanaLetterTags.c+t.KanaLetterTags.i,["ち","チ"]).set(t.KanaLetterTags.ch+t.KanaLetterTags.u,["つ","ツ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.e,["て","テ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.o,["と","ト"]).set(t.KanaLetterTags.n+t.KanaLetterTags.a,["な","ナ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.i,["に","ニ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.u,["ぬ","ヌ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.e,["ね","ネ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.o,["の","ノ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.a,["は","ハ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.i,["ひ","ヒ"]).set(t.KanaLetterTags.f+t.KanaLetterTags.u,["ふ","フ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.e,["へ","ヘ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.o,["ほ","ホ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.a,["ま","マ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.i,["み","ミ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.u,["む","ム"]).set(t.KanaLetterTags.m+t.KanaLetterTags.e,["め","メ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.o,["も","モ"]).set(t.KanaLetterTags.y+t.KanaLetterTags.a,["や","ヤ"]).set(t.KanaLetterTags.y+t.KanaLetterTags.u,["ゆ","ユ"]).set(t.KanaLetterTags.y+t.KanaLetterTags.o,["よ","ヨ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.a,["ら","ラ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.i,["り","リ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.u,["る","ル"]).set(t.KanaLetterTags.r+t.KanaLetterTags.e,["れ","レ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.o,["ろ","ロ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.a,["わ","ワ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.i,["ゐ","ヰ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.e,["ゑ","ヱ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.o,["を","ヲ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.a,["が","ガ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.i,["ぎ","ギ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.u,["ぐ","グ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.e,["げ","ゲ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.o,["ご","ゴ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.a,["ざ","ザ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.i,["じ","ジ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.u,["ず","ズ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.e,["ぜ","ゼ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.o,["ぞ","ゾ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.a,["だ","ダ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.e,["で","デ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.o,["ど","ド"]).set(t.KanaLetterTags.b+t.KanaLetterTags.a,["ば","バ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.i,["び","ビ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.u,["ぶ","ブ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.e,["べ","ベ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.o,["ぼ","ボ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.a,["ぱ","パ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.i,["ぴ","ピ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.u,["ぷ","プ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.e,["ぺ","ペ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.o,["ぽ","ポ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.y+t.KanaLetterTags.a,["きゃ","キャ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.y+t.KanaLetterTags.u,["きゅ","キュ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.y+t.KanaLetterTags.o,["きょ","キョ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.y+t.KanaLetterTags.a,["しゃ","シャ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.y+t.KanaLetterTags.u,["しゅ","シュ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.y+t.KanaLetterTags.o,["しょ","ショ"]).set(t.KanaLetterTags.c+t.KanaLetterTags.y+t.KanaLetterTags.a,["ちゃ","チャ"]).set(t.KanaLetterTags.c+t.KanaLetterTags.y+t.KanaLetterTags.u,["ちゅ","チュ"]).set(t.KanaLetterTags.c+t.KanaLetterTags.y+t.KanaLetterTags.o,["ちょ","チョ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.y+t.KanaLetterTags.a,["にゃ","ニャ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.y+t.KanaLetterTags.u,["にゅ","ニュ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.y+t.KanaLetterTags.o,["にょ","ニョ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.y+t.KanaLetterTags.a,["ひゃ","ヒャ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.y+t.KanaLetterTags.u,["ひゅ","ヒュ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.y+t.KanaLetterTags.o,["ひょ","ヒョ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.y+t.KanaLetterTags.a,["みゃ","ミャ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.y+t.KanaLetterTags.u,["みゅ","みょ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.y+t.KanaLetterTags.o,["ミュ","ミョ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.y+t.KanaLetterTags.a,["りゃ","リャ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.y+t.KanaLetterTags.u,["りゅ","リュ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.y+t.KanaLetterTags.o,["りょ","リョ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.y+t.KanaLetterTags.a,["ぎゃ","ギャ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.y+t.KanaLetterTags.u,["ぎゅ","ギュ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.y+t.KanaLetterTags.o,["ぎょ","ギョ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.a,["じゃ","ジャ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.u,["じゅ","ジュ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.o,["じょ","ジョ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.y+t.KanaLetterTags.a,["ぢゃ","ヂャ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.y+t.KanaLetterTags.u,["ぢ゙ゅ","ヂュ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.y+t.KanaLetterTags.o,["ぢ゙ょ","ヂョ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.y+t.KanaLetterTags.a,["びゃ","ビャ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.y+t.KanaLetterTags.u,["びゅ","ビュ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.y+t.KanaLetterTags.o,["びょ","ビョ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.y+t.KanaLetterTags.a,["ぴゃ","ピャ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.y+t.KanaLetterTags.u,["ぴゅ","ピュ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.y+t.KanaLetterTags.o,["ぴょ","ピョ"]),ds=(new Map).set(t.KanaLetterTags.s+t.KanaLetterTags.i,["","スィ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.y+t.KanaLetterTags.e,["","シェ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.i,["","ズィ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.e,["","ジェ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.w+t.KanaLetterTags.a,["","ジュァ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.w+t.KanaLetterTags.i,["","ジュィ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.w+t.KanaLetterTags.e,["","ジュェ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.w+t.KanaLetterTags.o,["","ジュォ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.i,["","ティ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.u,["","トゥ"]).set(t.KanaLetterTags.c+t.KanaLetterTags.y+t.KanaLetterTags.e,["","チェ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.y+t.KanaLetterTags.e,["","ヂェ"]).set(t.KanaLetterTags.c+t.KanaLetterTags.w+t.KanaLetterTags.a,["","チュァ"]).set(t.KanaLetterTags.c+t.KanaLetterTags.w+t.KanaLetterTags.i,["","チュィ"]).set(t.KanaLetterTags.c+t.KanaLetterTags.w+t.KanaLetterTags.e,["","チュェ"]).set(t.KanaLetterTags.c+t.KanaLetterTags.w+t.KanaLetterTags.o,["","チュォ"]).set(t.KanaLetterTags.ch+t.KanaLetterTags.a,["","ツァ"]).set(t.KanaLetterTags.ch+t.KanaLetterTags.i,["","ツィ"]).set(t.KanaLetterTags.ch+t.KanaLetterTags.e,["","ツェ"]).set(t.KanaLetterTags.ch+t.KanaLetterTags.o,["","ツォ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.i,["","ディ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.u,["","ドゥ"]).set(t.KanaLetterTags.f+t.KanaLetterTags.a,["","ファ"]).set(t.KanaLetterTags.f+t.KanaLetterTags.i,["","フィ"]).set(t.KanaLetterTags.f+t.KanaLetterTags.e,["","フェ"]).set(t.KanaLetterTags.f+t.KanaLetterTags.o,["","フォ"]).set(t.KanaLetterTags.y+t.KanaLetterTags.i,["","イィ"]).set(t.KanaLetterTags.y+t.KanaLetterTags.e,["","イェ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.a,["","ウァ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.i,["","ウィ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.e,["","ウェ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.o,["","ウォ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.a,["","ヴァ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.i,["","ヴィ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.u,["","ヴ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.e,["","ヴェ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.o,["","ヴォ"]);(new Map).set(t.KanaLetterTags.k+t.KanaLetterTags.y+t.KanaLetterTags.i,["","キィ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.y+t.KanaLetterTags.e,["","キェ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.y+t.KanaLetterTags.i,["","ギィ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.y+t.KanaLetterTags.e,["","ギェ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.y+t.KanaLetterTags.a,["","スャ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.y+t.KanaLetterTags.u,["","スュ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.y+t.KanaLetterTags.e,["","スィェ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.y+t.KanaLetterTags.o,["","スョ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.y+t.KanaLetterTags.a,["","ズャ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.y+t.KanaLetterTags.u,["","ズュ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.y+t.KanaLetterTags.e,["","ズィェ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.y+t.KanaLetterTags.o,["","ズョ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.y+t.KanaLetterTags.a,["","テャ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.y+t.KanaLetterTags.u,["","テュ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.y+t.KanaLetterTags.e,["","ティェ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.y+t.KanaLetterTags.o,["","テョ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.y+t.KanaLetterTags.a,["","デャ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.y+t.KanaLetterTags.u,["","デュ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.y+t.KanaLetterTags.e,["","デェ","ディェ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.y+t.KanaLetterTags.o,["","デョ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.y+t.KanaLetterTags.i,["","ニィ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.y+t.KanaLetterTags.e,["","ニェ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.y+t.KanaLetterTags.i,["","ヒィ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.y+t.KanaLetterTags.e,["","ヒェ"]).set(t.KanaLetterTags.f+t.KanaLetterTags.y+t.KanaLetterTags.a,["","フャ"]).set(t.KanaLetterTags.f+t.KanaLetterTags.y+t.KanaLetterTags.u,["","フュ"]).set(t.KanaLetterTags.f+t.KanaLetterTags.y+t.KanaLetterTags.e,["","フィェ"]).set(t.KanaLetterTags.f+t.KanaLetterTags.y+t.KanaLetterTags.o,["","フョ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.y+t.KanaLetterTags.e,["","ビェ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.y+t.KanaLetterTags.e,["","ピェ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.y+t.KanaLetterTags.i,["","ミィ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.y+t.KanaLetterTags.e,["","ミェ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.y+t.KanaLetterTags.i,["","リィ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.y+t.KanaLetterTags.e,["","リェ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.y+t.KanaLetterTags.a,["","ウャ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.y+t.KanaLetterTags.u,["","ウュ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.y+t.KanaLetterTags.o,["","ウョ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.y+t.KanaLetterTags.a,["","ヴャ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.y+t.KanaLetterTags.u,["","ヴュ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.y+t.KanaLetterTags.e,["","ヴィェ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.y+t.KanaLetterTags.o,["","ヴョ"]),(new Map).set(t.KanaLetterTags.k+t.KanaLetterTags.w+t.KanaLetterTags.a,["","クァ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.w+t.KanaLetterTags.i,["","クィ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.w+t.KanaLetterTags.u,["","クゥ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.w+t.KanaLetterTags.e,["","クェ"]).set(t.KanaLetterTags.k+t.KanaLetterTags.w+t.KanaLetterTags.o,["","クォ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.w+t.KanaLetterTags.a,["","グァ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.w+t.KanaLetterTags.i,["","グィ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.w+t.KanaLetterTags.u,["","グゥ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.w+t.KanaLetterTags.e,["","グェ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.w+t.KanaLetterTags.o,["","グォ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.w+t.KanaLetterTags.a,["","スァ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.w+t.KanaLetterTags.i,["","スゥィ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.w+t.KanaLetterTags.e,["","スェ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.w+t.KanaLetterTags.o,["","スォ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.w+t.KanaLetterTags.e,["","ズェ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.w+t.KanaLetterTags.a,["","トァ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.w+t.KanaLetterTags.i,["","トィ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.w+t.KanaLetterTags.e,["","トェ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.w+t.KanaLetterTags.o,["","トォ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.w+t.KanaLetterTags.a,["","ドァ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.w+t.KanaLetterTags.i,["","ドィ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.w+t.KanaLetterTags.e,["","ドェ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.w+t.KanaLetterTags.o,["","ドォ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.w+t.KanaLetterTags.a,["","ヌァ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.w+t.KanaLetterTags.i,["","ヌィ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.w+t.KanaLetterTags.e,["","ヌェ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.w+t.KanaLetterTags.o,["","ヌォ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.w+t.KanaLetterTags.a,["","ブァ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.w+t.KanaLetterTags.i,["","ブィ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.w+t.KanaLetterTags.e,["","ブェ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.w+t.KanaLetterTags.o,["","ブォ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.w+t.KanaLetterTags.a,["","プァ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.w+t.KanaLetterTags.i,["","プィ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.w+t.KanaLetterTags.e,["","プェ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.w+t.KanaLetterTags.o,["","プォ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.w+t.KanaLetterTags.a,["","ムァ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.w+t.KanaLetterTags.i,["","ムィ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.w+t.KanaLetterTags.e,["","ムェ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.w+t.KanaLetterTags.o,["","ムォ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.w+t.KanaLetterTags.a,["","ルァ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.w+t.KanaLetterTags.i,["","ルィ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.w+t.KanaLetterTags.e,["","ルェ"]).set(t.KanaLetterTags.r+t.KanaLetterTags.w+t.KanaLetterTags.o,["","ルォ"]);const ks=(new Map).set(t.KanaLetterTags.ng+t.KanaLetterTags.a,["","カ゚"]).set(t.KanaLetterTags.ng+t.KanaLetterTags.i,["","キ゚"]).set(t.KanaLetterTags.ng+t.KanaLetterTags.u,["","ク゚"]).set(t.KanaLetterTags.ng+t.KanaLetterTags.e,["","ケ゚"]).set(t.KanaLetterTags.ng+t.KanaLetterTags.o,["","コ゚"]).set(t.KanaLetterTags.s+t.KanaLetterTags.i,["","セィ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.i,["","ゼィ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.y+t.KanaLetterTags.i,["","シィ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.i,["","ジィ"]).set(t.KanaLetterTags.c+t.KanaLetterTags.y+t.KanaLetterTags.i,["","チィ"]).set(t.KanaLetterTags.ch+t.KanaLetterTags.u,["","ツゥ"]).set(t.KanaLetterTags.j+t.KanaLetterTags.y+t.KanaLetterTags.i,["","ヂィ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.u,["","ホゥ"]).set(t.KanaLetterTags.f+t.KanaLetterTags.u,["","フゥ"]).set(t.KanaLetterTags.y+t.KanaLetterTags.e,["","ユェ"]).set(t.KanaLetterTags.l+t.KanaLetterTags.a,["","ラ゚"]).set(t.KanaLetterTags.l+t.KanaLetterTags.i,["","リ゚"]).set(t.KanaLetterTags.l+t.KanaLetterTags.u,["","ル゚"]).set(t.KanaLetterTags.l+t.KanaLetterTags.e,["","レ゚"]).set(t.KanaLetterTags.l+t.KanaLetterTags.o,["","ロ゚"]).set(t.KanaLetterTags.w+t.KanaLetterTags.u,["","ウゥ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.a,["","ヷ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.i,["","ヸ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.e,["","ヹ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.o,["","ヺ"]);(new Map).set(t.KanaLetterTags.ng+t.KanaLetterTags.y+t.KanaLetterTags.a,["","キ゚ャ"]).set(t.KanaLetterTags.ng+t.KanaLetterTags.y+t.KanaLetterTags.u,["","キ゚ュ"]).set(t.KanaLetterTags.ng+t.KanaLetterTags.y+t.KanaLetterTags.o,["","キ゚ョ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.y+t.KanaLetterTags.e,["","テェ"]).set(t.KanaLetterTags.ch+t.KanaLetterTags.y+t.KanaLetterTags.a,["","ツャ"]).set(t.KanaLetterTags.ch+t.KanaLetterTags.y+t.KanaLetterTags.u,["","ツュ"]).set(t.KanaLetterTags.ch+t.KanaLetterTags.y+t.KanaLetterTags.o,["","ツョ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.y+t.KanaLetterTags.i,["","ビィ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.y+t.KanaLetterTags.i,["","ピィ"]).set(t.KanaLetterTags.l+t.KanaLetterTags.y+t.KanaLetterTags.a,["","リ゚ャ"]).set(t.KanaLetterTags.l+t.KanaLetterTags.y+t.KanaLetterTags.u,["","リ゚ュ"]).set(t.KanaLetterTags.l+t.KanaLetterTags.y+t.KanaLetterTags.o,["","リ゚ョ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.y+t.KanaLetterTags.a,["","ヰャ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.y+t.KanaLetterTags.u,["","ヰュ"]).set(t.KanaLetterTags.w+t.KanaLetterTags.y+t.KanaLetterTags.o,["","ヰョ"]),(new Map).set(t.KanaLetterTags.k+t.KanaLetterTags.w+t.KanaLetterTags.a,["","クヮ"]).set(t.KanaLetterTags.g+t.KanaLetterTags.w+t.KanaLetterTags.a,["","グヮ"]).set(t.KanaLetterTags.s+t.KanaLetterTags.w+t.KanaLetterTags.u,["","スゥ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.w+t.KanaLetterTags.a,["","ズァ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.w+t.KanaLetterTags.i,["","ズゥィ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.w+t.KanaLetterTags.e,["","ズゥ"]).set(t.KanaLetterTags.z+t.KanaLetterTags.w+t.KanaLetterTags.o,["","ズォ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.w+t.KanaLetterTags.a,["","トゥァ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.w+t.KanaLetterTags.i,["","トゥィ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.w+t.KanaLetterTags.u,["","トゥゥ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.w+t.KanaLetterTags.e,["","トゥェ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.w+t.KanaLetterTags.o,["","トゥォ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.w+t.KanaLetterTags.a,["","ドゥァ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.w+t.KanaLetterTags.i,["","ドゥィ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.w+t.KanaLetterTags.u,["","ドゥゥ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.w+t.KanaLetterTags.e,["","ドゥェ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.w+t.KanaLetterTags.o,["","ドゥォ"]).set(t.KanaLetterTags.n+t.KanaLetterTags.w+t.KanaLetterTags.u,["","ヌゥ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.w+t.KanaLetterTags.a,["","ホゥァ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.w+t.KanaLetterTags.i,["","ホゥィ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.w+t.KanaLetterTags.u,["","ホゥゥ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.w+t.KanaLetterTags.e,["","ホゥェ"]).set(t.KanaLetterTags.h+t.KanaLetterTags.w+t.KanaLetterTags.o,["","ホゥォ"]).set(t.KanaLetterTags.b+t.KanaLetterTags.w+t.KanaLetterTags.u,["","ブゥ"]).set(t.KanaLetterTags.p+t.KanaLetterTags.w+t.KanaLetterTags.u,["","プゥ"]).set(t.KanaLetterTags.m+t.KanaLetterTags.w+t.KanaLetterTags.u,["","ムゥ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.w+t.KanaLetterTags.a,["","ヴゥァ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.w+t.KanaLetterTags.i,["","ヴゥィ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.w+t.KanaLetterTags.u,["","ヴゥゥ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.w+t.KanaLetterTags.e,["","ヴゥェ"]).set(t.KanaLetterTags.v+t.KanaLetterTags.w+t.KanaLetterTags.o,["","ヴゥォ"]),(new Map).set(t.KanaLetterTags.t+t.KanaLetterTags.h+t.KanaLetterTags.a,["","テァ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.h+t.KanaLetterTags.u,["","テゥ"]).set(t.KanaLetterTags.t+t.KanaLetterTags.h+t.KanaLetterTags.o,["","テォ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.h+t.KanaLetterTags.a,["","デァ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.h+t.KanaLetterTags.u,["","デゥ"]).set(t.KanaLetterTags.d+t.KanaLetterTags.h+t.KanaLetterTags.o,["","デォ"]);const fs=[t.TonalLetterTags.m.toString(),t.TonalLetterTags.n.toString(),t.TonalLetterTags.ng.toString()],ys=fs,xs=fs,Ss=(new Map).set(t.TonalLetterTags.zero,[t.TonalLetterTags.z]).set(t.TonalLetterTags.y,[t.TonalLetterTags.zero,t.TonalLetterTags.f]).set(t.TonalLetterTags.w,[t.TonalLetterTags.y]).set(t.TonalLetterTags.x,[t.TonalLetterTags.z,t.TonalLetterTags.w]).set(t.TonalLetterTags.z,[t.TonalLetterTags.w]).set(t.TonalLetterTags.p,[t.TonalLetterTags.f,t.TonalLetterTags.w,t.TonalLetterTags.x]).set(t.TonalLetterTags.t,[t.TonalLetterTags.f,t.TonalLetterTags.w,t.TonalLetterTags.x]).set(t.TonalLetterTags.k,[t.TonalLetterTags.f,t.TonalLetterTags.w,t.TonalLetterTags.x]).set(t.TonalLetterTags.h,[t.TonalLetterTags.y,t.TonalLetterTags.f,t.TonalLetterTags.w,t.TonalLetterTags.x]).set(t.TonalLetterTags.pp,[t.TonalLetterTags.w,t.TonalLetterTags.x]).set(t.TonalLetterTags.tt,[t.TonalLetterTags.w,t.TonalLetterTags.x]).set(t.TonalLetterTags.kk,[t.TonalLetterTags.w,t.TonalLetterTags.x]).set(t.TonalLetterTags.hh,[t.TonalLetterTags.w,t.TonalLetterTags.x]),zs=[t.TonalLetterTags.w.toString(),t.TonalLetterTags.x.toString()],bs=[t.TonalLetterTags.b.toString(),t.TonalLetterTags.l.toString(),t.TonalLetterTags.g.toString(),t.TonalLetterTags.m.toString(),t.TonalLetterTags.n.toString()],Cs=[t.TonalLetterTags.j.toString(),t.TonalLetterTags.l.toString(),t.TonalLetterTags.s.toString()],js=[t.TonalLetterTags.b.toString(),t.TonalLetterTags.g.toString(),t.TonalLetterTags.k.toString(),t.TonalLetterTags.p.toString()],Fs=[t.TonalLetterTags.l.toString(),t.TonalLetterTags.s.toString()],As=[t.TonalLetterTags.m.toString(),t.TonalLetterTags.ng.toString()],vs={ph:t.TonalLetterTags.ph.toString(),kh:t.TonalLetterTags.kh.toString(),b:t.TonalLetterTags.b.toString(),g:t.TonalLetterTags.g.toString(),j:t.TonalLetterTags.j.toString(),k:t.TonalLetterTags.k.toString(),s:t.TonalLetterTags.s.toString(),p:t.TonalLetterTags.p.toString(),m:t.TonalLetterTags.m.toString(),n:t.TonalLetterTags.n.toString(),ng:t.TonalLetterTags.ng.toString()},Ms={ph:t.TonalLetterTags.ph.toString(),kh:t.TonalLetterTags.kh.toString(),g:t.TonalLetterTags.g.toString(),b:t.TonalLetterTags.b.toString(),j:t.TonalLetterTags.j.toString(),k:t.TonalLetterTags.k.toString(),s:t.TonalLetterTags.s.toString(),p:t.TonalLetterTags.p.toString(),m:t.TonalLetterTags.m.toString(),n:t.TonalLetterTags.n.toString(),ng:t.TonalLetterTags.ng.toString()},Ps=(new Map).set(t.TonalLetterTags.t+vs.ph,t.TonalLetterTags.p).set(t.TonalLetterTags.t+vs.p,t.TonalLetterTags.p).set(t.TonalLetterTags.t+vs.kh,t.TonalLetterTags.k).set(t.TonalLetterTags.t+vs.k,t.TonalLetterTags.k).set(t.TonalLetterTags.t+vs.g,t.TonalLetterTags.g).set(t.TonalLetterTags.t+t.TonalLetterTags.f+vs.j,t.TonalLetterTags.j).set(t.TonalLetterTags.t+t.TonalLetterTags.w+vs.j,t.TonalLetterTags.l).set(t.TonalLetterTags.t+vs.m,t.TonalLetterTags.h).set(t.TonalLetterTags.t+vs.n,t.TonalLetterTags.h).set(t.TonalLetterTags.t+vs.ng,t.TonalLetterTags.h).set(t.TonalLetterTags.tt+Ms.ph,t.TonalLetterTags.pp).set(t.TonalLetterTags.tt+Ms.p,t.TonalLetterTags.pp).set(t.TonalLetterTags.tt+Ms.kh,t.TonalLetterTags.kk).set(t.TonalLetterTags.tt+Ms.k,t.TonalLetterTags.kk).set(t.TonalLetterTags.tt+Ms.g,t.TonalLetterTags.gg).set(t.TonalLetterTags.tt+Ms.b,t.TonalLetterTags.ll).set(t.TonalLetterTags.tt+Ms.j,t.TonalLetterTags.ll).set(t.TonalLetterTags.tt+Ms.s,t.TonalLetterTags.ss).set(t.TonalLetterTags.tt+Ms.m,t.TonalLetterTags.hh).set(t.TonalLetterTags.tt+Ms.n,t.TonalLetterTags.hh).set(t.TonalLetterTags.tt+Ms.ng,t.TonalLetterTags.hh),Os=[t.TonalLetterTags.b.toString(),t.TonalLetterTags.g.toString(),t.TonalLetterTags.h.toString(),t.TonalLetterTags.j.toString(),t.TonalLetterTags.l.toString()],Es=(new Map).set(t.TonalLetterTags.pp,t.TonalLetterTags.p).set(t.TonalLetterTags.tt,t.TonalLetterTags.t).set(t.TonalLetterTags.kk,t.TonalLetterTags.k).set(t.TonalLetterTags.hh,t.TonalLetterTags.h),Is=(new Map).set(t.TonalLetterTags.p,t.TonalLetterTags.b).set(t.TonalLetterTags.t,t.TonalLetterTags.l).set(t.TonalLetterTags.k,t.TonalLetterTags.g).set(t.TonalLetterTags.pp,t.TonalLetterTags.bb).set(t.TonalLetterTags.tt,t.TonalLetterTags.ll).set(t.TonalLetterTags.kk,t.TonalLetterTags.gg),Vs=(new Map).set(t.TonalLetterTags.b,t.TonalLetterTags.p).set(t.TonalLetterTags.l,t.TonalLetterTags.t).set(t.TonalLetterTags.g,t.TonalLetterTags.k).set(t.TonalLetterTags.b+t.TonalLetterTags.f,t.TonalLetterTags.p).set(t.TonalLetterTags.b+t.TonalLetterTags.x,t.TonalLetterTags.pp).set(t.TonalLetterTags.l+t.TonalLetterTags.f,t.TonalLetterTags.t).set(t.TonalLetterTags.l+t.TonalLetterTags.x,t.TonalLetterTags.tt).set(t.TonalLetterTags.g+t.TonalLetterTags.f,t.TonalLetterTags.k).set(t.TonalLetterTags.g+t.TonalLetterTags.x,t.TonalLetterTags.kk).set(t.TonalLetterTags.bb,t.TonalLetterTags.pp).set(t.TonalLetterTags.ll,t.TonalLetterTags.tt).set(t.TonalLetterTags.gg,t.TonalLetterTags.kk),Ns=[t.TonalLetterTags.b.toString(),t.TonalLetterTags.g.toString(),t.TonalLetterTags.j.toString(),t.TonalLetterTags.l.toString(),t.TonalLetterTags.s.toString(),t.TonalLetterTags.bb.toString(),t.TonalLetterTags.gg.toString(),t.TonalLetterTags.ll.toString(),t.TonalLetterTags.ss.toString()],Ws=(new Map).set(t.TonalLetterTags.b,[t.TonalLetterTags.p,t.TonalLetterTags.t]).set(t.TonalLetterTags.g,[t.TonalLetterTags.k,t.TonalLetterTags.t]).set(t.TonalLetterTags.j,[t.TonalLetterTags.t]).set(t.TonalLetterTags.l,[t.TonalLetterTags.t]).set(t.TonalLetterTags.s,[t.TonalLetterTags.t]).set(t.TonalLetterTags.bb,[t.TonalLetterTags.pp,t.TonalLetterTags.tt]).set(t.TonalLetterTags.gg,[t.TonalLetterTags.kk,t.TonalLetterTags.tt]).set(t.TonalLetterTags.ll,[t.TonalLetterTags.tt]).set(t.TonalLetterTags.ss,[t.TonalLetterTags.tt]).set(t.TonalLetterTags.s+t.TonalLetterTags.w,[t.TonalLetterTags.tt]).set(t.TonalLetterTags.b+t.TonalLetterTags.f,[t.TonalLetterTags.p,t.TonalLetterTags.t]).set(t.TonalLetterTags.g+t.TonalLetterTags.f,[t.TonalLetterTags.k,t.TonalLetterTags.t]).set(t.TonalLetterTags.j+t.TonalLetterTags.f,[t.TonalLetterTags.t]).set(t.TonalLetterTags.l+t.TonalLetterTags.f,[t.TonalLetterTags.t]).set(t.TonalLetterTags.g+t.TonalLetterTags.w,[t.TonalLetterTags.kk,t.TonalLetterTags.tt]).set(t.TonalLetterTags.g+t.TonalLetterTags.x,[t.TonalLetterTags.kk,t.TonalLetterTags.tt]).set(t.TonalLetterTags.l+t.TonalLetterTags.w,[t.TonalLetterTags.tt]),qs={p:t.TonalLetterTags.p.toString(),t:t.TonalLetterTags.t.toString(),k:t.TonalLetterTags.k.toString(),h:t.TonalLetterTags.h.toString(),b:t.TonalLetterTags.b.toString(),g:t.TonalLetterTags.g.toString(),j:t.TonalLetterTags.j.toString(),l:t.TonalLetterTags.l.toString(),s:t.TonalLetterTags.s.toString()},Gs=(new Map).set(t.TonalLetterTags.p,t.TonalLetterTags.pp).set(t.TonalLetterTags.t,t.TonalLetterTags.tt).set(t.TonalLetterTags.k,t.TonalLetterTags.kk).set(t.TonalLetterTags.h,t.TonalLetterTags.hh),Us=[t.TonalLetterTags.p.toString(),t.TonalLetterTags.pp.toString(),t.TonalLetterTags.t.toString(),t.TonalLetterTags.tt.toString()],Ds=(new Map).set(t.TonalLetterTags.bb,qs.b.toString()).set(t.TonalLetterTags.gg,qs.g.toString()).set(t.TonalLetterTags.hh,qs.h.toString()).set(t.TonalLetterTags.kk,qs.k.toString()).set(t.TonalLetterTags.ll,qs.l.toString()).set(t.TonalLetterTags.pp,qs.p.toString()).set(t.TonalLetterTags.ss,qs.s.toString()).set(t.TonalLetterTags.tt,qs.t.toString()),Hs=(new Map).set(t.TonalLetterTags.h,t.TonalLetterTags.hh.toString()).set(t.TonalLetterTags.t,t.TonalLetterTags.tt.toString()),Bs=[];const Rs="̅";function _s(t,e){const a=Zs(Sr.get(t))(e);if(a&&a[0]){if(er.aspirated.includes(t))return tr.includes(t+e)?a[0]+Rs+"̣":a[0]+"̣";if(er.withoutADotOrOverline.includes(t))return a[0];if(er.withAnOverline.includes(t))return tr.includes(t+e)?a[0]+Rs:a[0]}return""}function Js(t,e){if(0==e){const e=rr.get(t.toString());if(e)return e[0]}return""}function Qs(e,a,n){return 0==a&&e[0].name===t.TonalSoundTags.vowel&&(1==e.length||2==e.length&&e[e.length-1].name===t.TonalSoundTags.freeTone||2==e.length&&e[e.length-1].name===t.TonalSoundTags.nasalization)||3==e.length&&e[e.length-2].name===t.TonalSoundTags.nasalization&&e[e.length-1].name===t.TonalSoundTags.freeTone?n:2==e.length&&e[0].name===t.TonalSoundTags.vowel&&(e[1].toString()===t.TonalLetterTags.h||e[1].toString()===t.TonalLetterTags.hh)||3==e.length&&e[0].name===t.TonalSoundTags.vowel&&(e[1].toString()===t.TonalLetterTags.h||e[1].toString()===t.TonalLetterTags.hh)&&e[2].name===t.TonalSoundTags.checkedTone||3==e.length&&e[0].name===t.TonalSoundTags.vowel&&e[1].name===t.TonalSoundTags.nasalization&&(e[2].toString()===t.TonalLetterTags.h||e[2].toString()===t.TonalLetterTags.hh)?Xs(e[0].toString()):""}function Xs(t){const e=Ks.get(t);return e&&e[1]?e[1]:""}function Ys(e){return function(e){let a=[],n=new Array(e.length),s="";for(let a=0;a<e.length;a++){const r=e[a].sounds.filter((e=>e.name===t.TonalSoundTags.initialConsonant)),g=e[a].sounds.filter((e=>e.name===t.TonalSoundTags.vowel)),o=e[a].sounds.filter((e=>e.name===t.TonalSoundTags.nasalFinalConsonant)),l=e[a].sounds.filter((e=>e.name===t.TonalSoundTags.stopFinalConsonant)),i=e[a].sounds.filter((e=>e.name===t.TonalSoundTags.freeTone)),T=e[a].sounds.filter((e=>e.name===t.TonalSoundTags.checkedTone)),h=e[a].sounds.filter((e=>e.name===t.TonalSoundTags.nasalization)),c=l.filter((e=>e.name===t.TonalSoundTags.stopFinalConsonant&&lr.includes(e.toString()))).concat(o.filter((e=>e.name===t.TonalSoundTags.nasalFinalConsonant&&lr.includes(e.toString()))));if(n[a]="",1==r.length&&g.length>0)for(let e=0;e<g.length;e++)if(nr.includes(g[e].toString()))n[a]+=_s(r[0].toString(),g[e].toString())+$s(g,l.length+o.length==1);else if(g[e].toString()===t.TonalLetterTags.ur)if(0==e){const t=_s(r[0].toString(),g[e].toString());if(n[a]+=t,1==l.length){const t=sr.get(g[e].toString());t&&(n[a]+=t[1])}else{const t=ar.get(g[e].toString());t&&(n[a]+=t[1])}}else if(1==l.length){const t=sr.get(g[e].toString());t&&(n[a]+=t[1])}else{const t=ar.get(g[e].toString());t&&(n[a]+=t[1])}else if(g[e].toString()===t.TonalLetterTags.e&&o.length+l.length>0&&0==h.length&&1==c.length)1==g.length?n[a]+=_s(r[0].toString(),t.TonalLetterTags.i):2==g.length&&(g[0].toString(),t.TonalLetterTags.i),g[e].toString()===t.TonalLetterTags.e&&(n[a]+=Xs(g[e].toString()));else if(e>0)if(1==l.length)n[a]+=Xs(g[e].toString());else if(1==e&&3==g.length)n[a]+=Xs(g[e].toString());else if(1==e&&2==g.length&&1==o.length)n[a]+=Xs(g[e].toString());else{const t=ms.get(g[e].toString());t&&t[1]&&(n[a]+=t[1])}else if(n[a]+=_s(r[0].toString(),g[e].toString()),0==o.length&&1==g.length&&0==l.length){const t=ms.get(g[e].toString());t&&t[1]&&(n[a]+=t[1])}else 0==o.length&&1==g.length&&1==l.length&&Bt.includes(l[0].toString())&&(n[a]+=Xs(g[e].toString()));if(0==r.length&&g.length>0)for(let s=0;s<g.length;s++){let r;if(r=0==s&&g[s].toString()===t.TonalLetterTags.o&&g.length>1?ms.get(t.KanaLetterTags.w+t.KanaLetterTags.o):ms.get(g[s].toString()),r)if(1==s&&3==g.length)n[a]+=Xs(g[s].toString());else if(1==s&&2==g.length&&1==l.length)n[a]+=Xs(g[s].toString());else if(1==s&&2==g.length&&1==o.length)n[a]+=Xs(g[s].toString());else if(2==s&&3==g.length&&1==l.length)n[a]+=Xs(g[s].toString());else if(0==s&&g[s].toString()===t.TonalLetterTags.e&&o.length+l.length>0&&0==h.length&&1==c.length){const e=ms.get(t.TonalLetterTags.i);e&&(n[a]+=e[1]),g[s].toString()===t.TonalLetterTags.e&&(n[a]+=Xs(g[s].toString()))}else n[a]+=r[1],n[a]+=Qs(e[a].sounds,s,r[1]);else if(g[s].toString()===t.TonalLetterTags.or||g[s].toString()===t.TonalLetterTags.ir){const t=ar.get(g[s].toString());t&&(n[a]+=t[1]+Rs,1==l.length&&Bt.includes(l[0].toString())?n[a]+=$s(g,l.length+o.length==1):n[a]+=Qs(e[a].sounds,a,t[1]+Rs))}else if(g[s].toString()===t.TonalLetterTags.ur||g[s].toString()===t.TonalLetterTags.er){const t=ar.get(g[s].toString());if(t&&0==l.length&&(n[a]+=t[1]),1==l.length){t&&1==g.length&&(n[a]+=t[1]);const e=sr.get(g[s].toString());e&&(n[a]+=e[1])}else 1==g.length&&t&&(n[a]+=Qs(e[a].sounds,s,t[1]))}else if(_t.includes(g[s].toString())){const t=ar.get(g[s].toString());t&&(n[a]+=t[1])}}if(1==h.length){const t=n[a].slice(1,n[a].length);if(1==r.length){const e=or.get(r[0].toString()+g[0].toString());e&&(n[a]=e+t)}else{const e=or.get(g[0].toString());e&&(n[a]=e+t)}}if(1==o.length){if(1==r.length&&0==g.length){const t=Zs(Sr.get(r[0].toString()))(o[0].toString());t&&t[0]&&(n[a]+=_s(r[0].toString(),o[0].toString()))}let t;t=l.length>0?Tr.get(o[0].toString()):ir.get(o[0].toString()),t&&t[1]&&(n[a]+=t[1])}if(1==l.length){const t=gr.get(l[0].toString());t&&t[1]&&(n[a]+=t[1]),Object.values(qs).includes(l[0].toString())&&(s=n[a]),n[a]+=Js(l[0].toString(),T.length)}1==i.length&&(n[a]+=rr.get(i[0].toString())),1==T.length&&(n[a]+=rr.get(T[0].toString()))}return a.push(n.join("")),s.length>0&&1==e.length&&a.push(s),a}(e)}const Zs=function(t){return function(e){if(e&&t&&t.has(e)){const a=t.get(e);if(a&&a[1])return[a[1]]}return[]}},$s=function(t,e){if(1==t.length){const a=ar.get(t[0].toString());if(a){if(e){const e=sr.get(t[0].toString());if(e)return e[1]+Rs}return a[1]+Rs}}else if(2==t.length){const e=sr.get(t[0].toString());if(e)return e[1]+Rs}return""},tr=[t.TonalLetterTags.ch.toString()+t.TonalLetterTags.a.toString(),t.TonalLetterTags.c.toString()+t.TonalLetterTags.a.toString(),t.TonalLetterTags.ch.toString()+t.TonalLetterTags.e.toString(),t.TonalLetterTags.c.toString()+t.TonalLetterTags.e.toString(),t.TonalLetterTags.ch.toString()+t.TonalLetterTags.o.toString(),t.TonalLetterTags.ch.toString()+t.TonalLetterTags.or.toString(),t.TonalLetterTags.ch.toString()+t.TonalLetterTags.ur.toString(),t.TonalLetterTags.c.toString()+t.TonalLetterTags.o.toString(),t.TonalLetterTags.t.toString()+t.TonalLetterTags.i.toString(),t.TonalLetterTags.th.toString()+t.TonalLetterTags.i.toString(),t.TonalLetterTags.t.toString()+t.TonalLetterTags.u.toString(),t.TonalLetterTags.th.toString()+t.TonalLetterTags.u.toString(),t.TonalLetterTags.t.toString()+t.TonalLetterTags.ng.toString(),t.TonalLetterTags.th.toString()+t.TonalLetterTags.ng.toString(),t.TonalLetterTags.t.toString()+t.TonalLetterTags.ir.toString(),t.TonalLetterTags.th.toString()+t.TonalLetterTags.ir.toString()],er={aspirated:[t.TonalLetterTags.kh.toString(),t.TonalLetterTags.c.toString(),t.TonalLetterTags.ph.toString(),t.TonalLetterTags.th.toString()],withoutADotOrOverline:[t.TonalLetterTags.k.toString(),t.TonalLetterTags.g.toString(),t.TonalLetterTags.b.toString(),t.TonalLetterTags.p.toString(),t.TonalLetterTags.j.toString(),t.TonalLetterTags.l.toString(),t.TonalLetterTags.h.toString(),t.TonalLetterTags.s.toString(),t.TonalLetterTags.m.toString(),t.TonalLetterTags.n.toString(),t.TonalLetterTags.ng.toString()],withAnOverline:[t.TonalLetterTags.ch.toString(),t.TonalLetterTags.c.toString(),t.TonalLetterTags.t.toString()]},ar=(new Map).set(t.TonalLetterTags.ir,ms.get(t.KanaLetterTags.u)).set(t.TonalLetterTags.or,ms.get(t.KanaLetterTags.o)).set(t.TonalLetterTags.ur,ms.get(t.KanaLetterTags.w+t.KanaLetterTags.o)).set(t.TonalLetterTags.er,ms.get(t.KanaLetterTags.e)).set(t.TonalLetterTags.m,ms.get(t.KanaLetterTags.m+t.KanaLetterTags.u)).set(t.TonalLetterTags.n,ms.get(t.KanaLetterTags.n+t.KanaLetterTags.u)).set(t.TonalLetterTags.ng,ws.get(t.KanaLetterTags.n)),nr=[t.TonalLetterTags.ir.toString(),t.TonalLetterTags.or.toString()],sr=(new Map).set(t.TonalLetterTags.a,Ks.get(t.KanaLetterTags.a)).set(t.TonalLetterTags.i,Ks.get(t.KanaLetterTags.i)).set(t.TonalLetterTags.e,Ks.get(t.KanaLetterTags.e)).set(t.TonalLetterTags.or,Ks.get(t.KanaLetterTags.o)).set(t.TonalLetterTags.ur,Ks.get(t.KanaLetterTags.w+t.KanaLetterTags.o)).set(t.TonalLetterTags.ir,Ks.get(t.KanaLetterTags.u)).set(t.TonalLetterTags.m,Ks.get(t.KanaLetterTags.m+t.KanaLetterTags.u)).set(t.TonalLetterTags.n,Ks.get(t.KanaLetterTags.n+t.KanaLetterTags.u)).set(t.TonalLetterTags.ng,Ks.get(t.KanaLetterTags.n)),rr=(new Map).set(t.TonalLetterTags.f,"⍭").set(t.TonalLetterTags.y,"⎛").set(t.TonalLetterTags.w,"⎝").set(t.TonalLetterTags.x,"⟨").set(t.TonalLetterTags.zx,"⟩").set(t.TonalLetterTags.z,"⎸").set(t.TonalLetterTags.xx,"⫽").set(t.TonalLetterTags.p,"⤆").set(t.TonalLetterTags.t,"⤆").set(t.TonalLetterTags.k,"⤆").set(t.TonalLetterTags.h,"⤆").set(t.TonalLetterTags.b,"⤆").set(t.TonalLetterTags.g,"⤆").set(t.TonalLetterTags.j,"⤆").set(t.TonalLetterTags.l,"⤆").set(t.TonalLetterTags.s,"⤆").set(t.TonalLetterTags.pp,"⤇").set(t.TonalLetterTags.tt,"⤇").set(t.TonalLetterTags.kk,"⤇").set(t.TonalLetterTags.hh,"⤇").set(t.TonalLetterTags.bb,"⤇").set(t.TonalLetterTags.gg,"⤇").set(t.TonalLetterTags.ll,"⤇").set(t.TonalLetterTags.ss,"⤇"),gr=(new Map).set(t.TonalLetterTags.p,Ks.get(t.KanaLetterTags.p+t.KanaLetterTags.u)).set(t.TonalLetterTags.t,ps.get(t.KanaLetterTags.ch+t.KanaLetterTags.u)).set(t.TonalLetterTags.k,Ks.get(t.KanaLetterTags.k+t.KanaLetterTags.u)).set(t.TonalLetterTags.b,Ks.get(t.KanaLetterTags.b+t.KanaLetterTags.u)).set(t.TonalLetterTags.g,Ks.get(t.KanaLetterTags.g+t.KanaLetterTags.u)).set(t.TonalLetterTags.j,Ks.get(t.KanaLetterTags.j+t.KanaLetterTags.u)).set(t.TonalLetterTags.l,Ks.get(t.KanaLetterTags.r+t.KanaLetterTags.u)).set(t.TonalLetterTags.s,Ks.get(t.KanaLetterTags.s+t.KanaLetterTags.u)).set(t.TonalLetterTags.pp,Ks.get(t.KanaLetterTags.p+t.KanaLetterTags.u)).set(t.TonalLetterTags.tt,ps.get(t.KanaLetterTags.ch+t.KanaLetterTags.u)).set(t.TonalLetterTags.kk,Ks.get(t.KanaLetterTags.k+t.KanaLetterTags.u)).set(t.TonalLetterTags.bb,Ks.get(t.KanaLetterTags.b+t.KanaLetterTags.u)).set(t.TonalLetterTags.gg,Ks.get(t.KanaLetterTags.g+t.KanaLetterTags.u)).set(t.TonalLetterTags.ll,Ks.get(t.KanaLetterTags.r+t.KanaLetterTags.u)).set(t.TonalLetterTags.ss,Ks.get(t.KanaLetterTags.s+t.KanaLetterTags.u)),or=(new Map).set(t.TonalLetterTags.a,"㋐").set(t.TonalLetterTags.i,"㋑").set(t.TonalLetterTags.ir,"㋒").set(t.TonalLetterTags.u,"㋒").set(t.TonalLetterTags.e,"㋓").set(t.TonalLetterTags.o,"㋔").set(t.TonalLetterTags.kh+t.TonalLetterTags.a,"㋕").set(t.TonalLetterTags.kh+t.TonalLetterTags.i,"㋖").set(t.TonalLetterTags.kh+t.TonalLetterTags.u,"㋗").set(t.TonalLetterTags.kh+t.TonalLetterTags.e,"㋘").set(t.TonalLetterTags.kh+t.TonalLetterTags.o,"㋙").set(t.TonalLetterTags.s+t.TonalLetterTags.a,"㋚").set(t.TonalLetterTags.s+t.TonalLetterTags.i,"㋛").set(t.TonalLetterTags.s+t.TonalLetterTags.u,"㋜").set(t.TonalLetterTags.s+t.TonalLetterTags.e,"㋝").set(t.TonalLetterTags.s+t.TonalLetterTags.o,"㋞").set(t.TonalLetterTags.c+t.TonalLetterTags.a,"㋚").set(t.TonalLetterTags.c+t.TonalLetterTags.i,"㋠").set(t.TonalLetterTags.c+t.TonalLetterTags.ir,"㋡").set(t.TonalLetterTags.c+t.TonalLetterTags.u,"㋡").set(t.TonalLetterTags.c+t.TonalLetterTags.e,"㋝").set(t.TonalLetterTags.c+t.TonalLetterTags.o,"㋞").set(t.TonalLetterTags.ch+t.TonalLetterTags.a,"㋚").set(t.TonalLetterTags.ch+t.TonalLetterTags.i,"㋠").set(t.TonalLetterTags.ch+t.TonalLetterTags.ir,"㋡").set(t.TonalLetterTags.ch+t.TonalLetterTags.u,"㋡").set(t.TonalLetterTags.ch+t.TonalLetterTags.e,"㋝").set(t.TonalLetterTags.ch+t.TonalLetterTags.o,"㋞").set(t.TonalLetterTags.t+t.TonalLetterTags.a,"㋟").set(t.TonalLetterTags.t+t.TonalLetterTags.i,"㋠").set(t.TonalLetterTags.t+t.TonalLetterTags.u,"㋡").set(t.TonalLetterTags.t+t.TonalLetterTags.e,"㋢").set(t.TonalLetterTags.t+t.TonalLetterTags.o,"㋣").set(t.TonalLetterTags.j+t.TonalLetterTags.i,"㋛゙").set(t.TonalLetterTags.ph+t.TonalLetterTags.a,"㋩゚").set(t.TonalLetterTags.ph+t.TonalLetterTags.i,"㋪゚").set(t.TonalLetterTags.ph+t.TonalLetterTags.u,"㋫゚").set(t.TonalLetterTags.ph+t.TonalLetterTags.e,"㋬゚").set(t.TonalLetterTags.ph+t.TonalLetterTags.o,"㋭゚").set(t.TonalLetterTags.k+t.TonalLetterTags.a,"㋕").set(t.TonalLetterTags.k+t.TonalLetterTags.i,"㋖").set(t.TonalLetterTags.k+t.TonalLetterTags.ir,"㋗").set(t.TonalLetterTags.k+t.TonalLetterTags.u,"㋗").set(t.TonalLetterTags.k+t.TonalLetterTags.e,"㋘").set(t.TonalLetterTags.k+t.TonalLetterTags.o,"㋙").set(t.TonalLetterTags.h+t.TonalLetterTags.a,"㋩").set(t.TonalLetterTags.h+t.TonalLetterTags.i,"㋪").set(t.TonalLetterTags.h+t.TonalLetterTags.ir,"㋫").set(t.TonalLetterTags.h+t.TonalLetterTags.u,"㋫").set(t.TonalLetterTags.h+t.TonalLetterTags.e,"㋬").set(t.TonalLetterTags.h+t.TonalLetterTags.o,"㋭").set(t.TonalLetterTags.th+t.TonalLetterTags.a,"㋟").set(t.TonalLetterTags.th+t.TonalLetterTags.i,"㋠").set(t.TonalLetterTags.th+t.TonalLetterTags.u,"㋡").set(t.TonalLetterTags.th+t.TonalLetterTags.e,"㋢").set(t.TonalLetterTags.th+t.TonalLetterTags.o,"㋣").set(t.TonalLetterTags.p+t.TonalLetterTags.a,"㋩゚").set(t.TonalLetterTags.p+t.TonalLetterTags.i,"㋪゚").set(t.TonalLetterTags.p+t.TonalLetterTags.u,"㋫゚").set(t.TonalLetterTags.p+t.TonalLetterTags.e,"㋬゚").set(t.TonalLetterTags.p+t.TonalLetterTags.o,"㋭゚"),lr=[t.TonalLetterTags.k.toString(),t.TonalLetterTags.g.toString(),t.TonalLetterTags.kk.toString(),t.TonalLetterTags.gg.toString(),t.TonalLetterTags.ng.toString()],ir=(new Map).set(t.TonalLetterTags.m,ms.get(t.KanaLetterTags.m+t.KanaLetterTags.u)).set(t.TonalLetterTags.n,ms.get(t.KanaLetterTags.n+t.KanaLetterTags.u)).set(t.TonalLetterTags.ng,ws.get(t.KanaLetterTags.n)),Tr=(new Map).set(t.TonalLetterTags.m,Ks.get(t.KanaLetterTags.m+t.KanaLetterTags.u)).set(t.TonalLetterTags.n,Ks.get(t.KanaLetterTags.n+t.KanaLetterTags.u)).set(t.TonalLetterTags.ng,Ks.get(t.KanaLetterTags.n)),hr=(new Map).set(t.TonalLetterTags.a,ms.get(t.KanaLetterTags.b+t.KanaLetterTags.a)).set(t.TonalLetterTags.e,ms.get(t.KanaLetterTags.b+t.KanaLetterTags.e)).set(t.TonalLetterTags.i,ms.get(t.KanaLetterTags.b+t.KanaLetterTags.i)).set(t.TonalLetterTags.o,ms.get(t.KanaLetterTags.b+t.KanaLetterTags.o)).set(t.TonalLetterTags.u,ms.get(t.KanaLetterTags.b+t.KanaLetterTags.u)).set(t.TonalLetterTags.ur,ms.get(t.KanaLetterTags.b+t.KanaLetterTags.o)).set(t.TonalLetterTags.or,ms.get(t.KanaLetterTags.b+t.KanaLetterTags.o)),cr=(new Map).set(t.TonalLetterTags.a,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.a)).set(t.TonalLetterTags.e,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.e)).set(t.TonalLetterTags.i,ms.get(t.KanaLetterTags.c+t.KanaLetterTags.i)).set(t.TonalLetterTags.o,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.o)).set(t.TonalLetterTags.or,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.o)).set(t.TonalLetterTags.u,ms.get(t.KanaLetterTags.ch+t.KanaLetterTags.u)).set(t.TonalLetterTags.ur,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.o)).set(t.TonalLetterTags.ng,ms.get(t.KanaLetterTags.ch+t.KanaLetterTags.u)).set(t.TonalLetterTags.ir,ms.get(t.KanaLetterTags.ch+t.KanaLetterTags.u)).set(t.TonalLetterTags.m,ms.get(t.KanaLetterTags.ch+t.KanaLetterTags.u)),Lr=(new Map).set(t.TonalLetterTags.a,ms.get(t.KanaLetterTags.g+t.KanaLetterTags.a)).set(t.TonalLetterTags.i,ms.get(t.KanaLetterTags.g+t.KanaLetterTags.i)).set(t.TonalLetterTags.u,ms.get(t.KanaLetterTags.g+t.KanaLetterTags.u)).set(t.TonalLetterTags.e,ms.get(t.KanaLetterTags.g+t.KanaLetterTags.e)).set(t.TonalLetterTags.o,ms.get(t.KanaLetterTags.g+t.KanaLetterTags.o)).set(t.TonalLetterTags.ur,ms.get(t.KanaLetterTags.g+t.KanaLetterTags.o)).set(t.TonalLetterTags.ir,ms.get(t.KanaLetterTags.g+t.KanaLetterTags.u)).set(t.TonalLetterTags.or,ms.get(t.KanaLetterTags.g+t.KanaLetterTags.o)),ur=(new Map).set(t.TonalLetterTags.a,ms.get(t.KanaLetterTags.h+t.KanaLetterTags.a)).set(t.TonalLetterTags.e,ms.get(t.KanaLetterTags.h+t.KanaLetterTags.e)).set(t.TonalLetterTags.i,ms.get(t.KanaLetterTags.h+t.KanaLetterTags.i)).set(t.TonalLetterTags.ir,ms.get(t.KanaLetterTags.f+t.KanaLetterTags.u)).set(t.TonalLetterTags.m,ms.get(t.KanaLetterTags.f+t.KanaLetterTags.u)).set(t.TonalLetterTags.o,ms.get(t.KanaLetterTags.h+t.KanaLetterTags.o)).set(t.TonalLetterTags.ng,ms.get(t.KanaLetterTags.f+t.KanaLetterTags.u)).set(t.TonalLetterTags.u,ms.get(t.KanaLetterTags.f+t.KanaLetterTags.u)).set(t.TonalLetterTags.ur,ms.get(t.KanaLetterTags.h+t.KanaLetterTags.o)).set(t.TonalLetterTags.or,ms.get(t.KanaLetterTags.h+t.KanaLetterTags.o)),pr=(new Map).set(t.TonalLetterTags.e,ms.get(t.KanaLetterTags.z+t.KanaLetterTags.e)).set(t.TonalLetterTags.i,ms.get(t.KanaLetterTags.j+t.KanaLetterTags.i)).set(t.TonalLetterTags.o,ms.get(t.KanaLetterTags.z+t.KanaLetterTags.o)).set(t.TonalLetterTags.or,ms.get(t.KanaLetterTags.z+t.KanaLetterTags.o)).set(t.TonalLetterTags.u,ms.get(t.KanaLetterTags.z+t.KanaLetterTags.u)).set(t.TonalLetterTags.ir,ms.get(t.KanaLetterTags.z+t.KanaLetterTags.u)).set(t.TonalLetterTags.ur,ms.get(t.KanaLetterTags.z+t.KanaLetterTags.u)),wr=(new Map).set(t.TonalLetterTags.a,ms.get(t.KanaLetterTags.k+t.KanaLetterTags.a)).set(t.TonalLetterTags.i,ms.get(t.KanaLetterTags.k+t.KanaLetterTags.i)).set(t.TonalLetterTags.u,ms.get(t.KanaLetterTags.k+t.KanaLetterTags.u)).set(t.TonalLetterTags.e,ms.get(t.KanaLetterTags.k+t.KanaLetterTags.e)).set(t.TonalLetterTags.o,ms.get(t.KanaLetterTags.k+t.KanaLetterTags.o)).set(t.TonalLetterTags.ur,ms.get(t.KanaLetterTags.k+t.KanaLetterTags.o)).set(t.TonalLetterTags.ir,ms.get(t.KanaLetterTags.k+t.KanaLetterTags.u)).set(t.TonalLetterTags.or,ms.get(t.KanaLetterTags.k+t.KanaLetterTags.o)).set(t.TonalLetterTags.ng,ms.get(t.KanaLetterTags.k+t.KanaLetterTags.u)),Kr=(new Map).set(t.TonalLetterTags.a,ms.get(t.KanaLetterTags.r+t.KanaLetterTags.a)).set(t.TonalLetterTags.e,ms.get(t.KanaLetterTags.r+t.KanaLetterTags.e)).set(t.TonalLetterTags.i,ms.get(t.KanaLetterTags.r+t.KanaLetterTags.i)).set(t.TonalLetterTags.o,ms.get(t.KanaLetterTags.r+t.KanaLetterTags.o)).set(t.TonalLetterTags.u,ms.get(t.KanaLetterTags.r+t.KanaLetterTags.u)).set(t.TonalLetterTags.ir,ms.get(t.KanaLetterTags.r+t.KanaLetterTags.u)).set(t.TonalLetterTags.ur,ms.get(t.KanaLetterTags.r+t.KanaLetterTags.o)).set(t.TonalLetterTags.or,ms.get(t.KanaLetterTags.r+t.KanaLetterTags.o)).set(t.TonalLetterTags.ng,ms.get(t.KanaLetterTags.r+t.KanaLetterTags.u)),mr=(new Map).set(t.TonalLetterTags.a,ms.get(t.KanaLetterTags.m+t.KanaLetterTags.a)).set(t.TonalLetterTags.i,ms.get(t.KanaLetterTags.m+t.KanaLetterTags.i)).set(t.TonalLetterTags.u,ms.get(t.KanaLetterTags.m+t.KanaLetterTags.u)).set(t.TonalLetterTags.e,ms.get(t.KanaLetterTags.m+t.KanaLetterTags.e)).set(t.TonalLetterTags.o,ms.get(t.KanaLetterTags.m+t.KanaLetterTags.o)).set(t.TonalLetterTags.ng,ms.get(t.KanaLetterTags.m+t.KanaLetterTags.u)),dr=(new Map).set(t.TonalLetterTags.a,ms.get(t.KanaLetterTags.n+t.KanaLetterTags.a)).set(t.TonalLetterTags.e,ms.get(t.KanaLetterTags.n+t.KanaLetterTags.e)).set(t.TonalLetterTags.i,ms.get(t.KanaLetterTags.n+t.KanaLetterTags.i)).set(t.TonalLetterTags.o,ms.get(t.KanaLetterTags.n+t.KanaLetterTags.o)).set(t.TonalLetterTags.u,ms.get(t.KanaLetterTags.n+t.KanaLetterTags.u)).set(t.TonalLetterTags.ir,ms.get(t.KanaLetterTags.n+t.KanaLetterTags.u)),kr=(new Map).set(t.TonalLetterTags.a,ks.get(t.KanaLetterTags.ng+t.KanaLetterTags.a)).set(t.TonalLetterTags.i,ks.get(t.KanaLetterTags.ng+t.KanaLetterTags.i)).set(t.TonalLetterTags.e,ks.get(t.KanaLetterTags.ng+t.KanaLetterTags.e)).set(t.TonalLetterTags.o,ks.get(t.KanaLetterTags.ng+t.KanaLetterTags.o)).set(t.TonalLetterTags.ir,ks.get(t.KanaLetterTags.ng+t.KanaLetterTags.u)),fr=(new Map).set(t.TonalLetterTags.a,ms.get(t.KanaLetterTags.p+t.KanaLetterTags.a)).set(t.TonalLetterTags.e,ms.get(t.KanaLetterTags.p+t.KanaLetterTags.e)).set(t.TonalLetterTags.i,ms.get(t.KanaLetterTags.p+t.KanaLetterTags.i)).set(t.TonalLetterTags.o,ms.get(t.KanaLetterTags.p+t.KanaLetterTags.o)).set(t.TonalLetterTags.u,ms.get(t.KanaLetterTags.p+t.KanaLetterTags.u)).set(t.TonalLetterTags.ng,ms.get(t.KanaLetterTags.p+t.KanaLetterTags.u)).set(t.TonalLetterTags.ir,ms.get(t.KanaLetterTags.p+t.KanaLetterTags.u)).set(t.TonalLetterTags.or,ms.get(t.KanaLetterTags.p+t.KanaLetterTags.o)).set(t.TonalLetterTags.ur,ms.get(t.KanaLetterTags.p+t.KanaLetterTags.o)),yr=(new Map).set(t.TonalLetterTags.a,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.a)).set(t.TonalLetterTags.e,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.e)).set(t.TonalLetterTags.i,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.i)).set(t.TonalLetterTags.o,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.o)).set(t.TonalLetterTags.or,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.o)).set(t.TonalLetterTags.u,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.u)).set(t.TonalLetterTags.ur,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.o)).set(t.TonalLetterTags.ng,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.u)).set(t.TonalLetterTags.ir,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.u)).set(t.TonalLetterTags.m,ms.get(t.KanaLetterTags.s+t.KanaLetterTags.u)),xr=(new Map).set(t.TonalLetterTags.a,ms.get(t.KanaLetterTags.t+t.KanaLetterTags.a)).set(t.TonalLetterTags.e,ms.get(t.KanaLetterTags.t+t.KanaLetterTags.e)).set(t.TonalLetterTags.i,ms.get(t.KanaLetterTags.c+t.KanaLetterTags.i)).set(t.TonalLetterTags.o,ms.get(t.KanaLetterTags.t+t.KanaLetterTags.o)).set(t.TonalLetterTags.u,ms.get(t.KanaLetterTags.ch+t.KanaLetterTags.u)).set(t.TonalLetterTags.ng,ms.get(t.KanaLetterTags.ch+t.KanaLetterTags.u)).set(t.TonalLetterTags.ir,ms.get(t.KanaLetterTags.ch+t.KanaLetterTags.u)).set(t.TonalLetterTags.ur,ms.get(t.KanaLetterTags.t+t.KanaLetterTags.o)).set(t.TonalLetterTags.or,ms.get(t.KanaLetterTags.t+t.KanaLetterTags.o)),Sr=(new Map).set(t.TonalLetterTags.b,hr).set(t.TonalLetterTags.c,cr).set(t.TonalLetterTags.ch,cr).set(t.TonalLetterTags.t,xr).set(t.TonalLetterTags.g,Lr).set(t.TonalLetterTags.h,ur).set(t.TonalLetterTags.j,pr).set(t.TonalLetterTags.kh,wr).set(t.TonalLetterTags.l,Kr).set(t.TonalLetterTags.m,mr).set(t.TonalLetterTags.n,dr).set(t.TonalLetterTags.ng,kr).set(t.TonalLetterTags.ph,fr).set(t.TonalLetterTags.k,wr).set(t.TonalLetterTags.s,yr).set(t.TonalLetterTags.th,xr).set(t.TonalLetterTags.p,fr);class zr{}class br extends zr{apply(t,e){return[]}}class Cr extends br{}class jr extends br{applyToLetters(t){return t.shift(),t}applyToString(t){return t.slice(1,2)}}class Fr extends zr{}class Ar extends zr{apply(t,e){return[]}}class vr extends zr{apply(t){return[]}}class Mr extends vr{}class Pr extends zr{apply(t){return[]}}class Or extends zr{apply(t){return[]}}class Er extends zr{apply(t,e){return[]}}class Ir extends zr{apply(t,e){return[]}}class Vr extends zr{apply(t,e,a){return[]}}class Nr extends u{popLetter(){this.letters=this.letters.slice(0,this.letters.length-1),this.concat()}get lastLetter(){return this.letters.length>=1?this.letters[this.letters.length-1]:new s([])}get lastSecondLetter(){return this.letters.length>=2?this.letters[this.letters.length-2]:new s([])}}class Wr{}class qr extends Wr{constructor(){super(...arguments),this.affix=new y}toString(){return this.affix.toString()}}class Gr extends qr{}class Ur extends qr{}class Dr extends Wr{constructor(){super(...arguments),this.allomorph=new d}toString(){return this.allomorph.toString()}}class Hr extends Dr{}class Br extends Dr{}class Rr extends K{constructor(t){super(),this.syllables=new Array,null!=t&&(this.syllables=t,this.concat())}popSyllable(){this.syllables=this.syllables.slice(0,this.syllables.length-1),this.concat()}pushSyllable(t){this.syllables.push(t),this.concat()}shiftSyllable(){const t=this.syllables.shift();return this.concat(),t}unshiftSyllable(t){const e=this.syllables.unshift(t);return this.concat(),e}replaceSyllable(t,e){t<this.syllables.length&&this.syllables.splice(t,1,e),this.concat()}concat(){this.literal=this.syllables.map((t=>t?t.literal:"")).join("")}}class _r extends class{constructor(){this.literal=""}}{constructor(t){super(),this.words=new Array,t&&(this.words=t,this.concat())}popWord(){this.words=this.words.slice(0,this.words.length-1),this.concat()}pushWord(t){this.words.push(t),this.concat()}concat(){this.words.length>0&&(0==this.words.filter((t=>t&&t.literal.length>0)).length?this.literal="":this.literal=this.words.map((t=>t?t.literal:"")).join(" "))}}function Jr(t){return!!Yr.includes(t)||(!!Xr.includes(t)||!!Qr.includes(t))}const Qr=["bam","bek","biet","bit","biu","bua","buat","bor","cua","cuai","cuang","cuat","com","cor","core","chap","chiak","chio","chir","chiri","chuai","chuang","chue","chom","chor","chore","tiang","tim","tio","tir","tiri","tiur","tua","tue","tom","tor","tore","tut","er","ga","gai","gak","gang","gap","ge","gir","go","gue","gok","guat","gong","gor","gore","gur","hiap","hio","hir","hiri","hirn","hiur","huai","huang","hop","hor","hore","iak","ionn","ir","iri","irn","je","jek","jing","jiak","jiap","jien","jiet","jin","jir","jit","jiu","jiur","jo","jua","jue","jor","jun","jur","khir","khor","lai","lat","lia","liak","liet","lir","lo","lua","luat","lue","lop","lom","lor","lore","m","mia","min","muai","mue","mu","nio","no","nui","nga","or","ore","ken","ket","kiak","kiang","kio","kip","kir","kiri","kirn","kit","kiur","kor","ua","uak","phor","sir","siri","sop","sor","sore","tha","thia","thor","pia","piang","piri","pua","por"],Xr=["aih","buaix","buaiw","bueh","burh","cuaih","chuainn","chuatt","tngh","en","geh","gehh","gih","giuh","gimw","gueh","gunx","guny","homz","huainn","jip","khiaih","khuih","laih","langh","lip","lih","lit","litt","luaih","luaiz","lueh","mnghh","n","ngh","oh","op","sangh","sennh","sienh","sinnh","tenz"],Yr=["a","ay","az","ah","ahh","ai","aiy","aiw","ainnz","ak","am","amy","amw","amx","amz","an","any","anw","anx","anz","ang","angw","angx","angz","annw","annx","annz","ap","app","at","au","auy","auw","aux","auz","ba","bax","baz","bah","bai","baiy","baix","bak","bakk","ban","bany","banx","banz","bangy","bangw","bangx","bangz","bat","batt","bauy","bauz","bey","bex","bez","beh","behh","biy","bix","biz","bieny","bienx","bienz","biett","biauy","biaux","biauz","bih","bihh","bekk","biny","binx","binz","bingy","bingx","bingz","biury","biurx","biurz","bitt","biuz","bury","burx","burz","bok","bokk","bong","bongy","bongw","bongx","bongz","boy","box","boz","buy","bux","buz","buax","buah","buahh","buany","buatt","buey","buex","buez","buehh","bui","buny","bunw","bunx","bunz","but","butt","ca","cay","cax","caz","cah","cai","caiy","caiw","caix","caiz","cak","cakk","cam","camy","camw","camx","can","canw","canx","cang","cangy","cangw","canny","cannz","cap","capp","cat","catt","cau","cauy","cauw","cauhh","ce","cey","cew","cex","cez","ceh","cenn","cenny","cennw","ci","ciy","ciw","cix","ciz","cia","ciax","ciah","ciakk","ciam","ciamy","cien","cieny","cienx","ciangy","ciangw","ciangx","ciangz","ciann","cianny","ciannw","ciannx","ciap","ciet","ciau","ciauw","ciaux","cih","cihh","cek","cekk","cim","cimy","cin","cinw","cing","cingy","cingw","cingx","cingz","cinn","cinny","cinnx","ciur","ciurw","ciurz","ciurh","ciurhh","ciok","ciokk","ciong","ciongw","cip","cit","ciu","ciuy","ciux","ciuz","ciunn","ciunny","ciunnw","ciunnx","ciunnz","cng","cngy","cngw","cngx","cngh","cnghh","cur","cury","curw","curh","cok","cokk","cong","congy","congw","congx","co","coy","cow","cu","cuy","cuw","cuz","cuaw","cuaz","cuah","cuahh","cuan","cuan","cuanw","cuanx","cuangw","cuann","cuannw","cue","cuey","cuex","cuez","cuh","cuhh","cui","cuiy","cuiw","cun","cuny","cunw","cunx","cunz","cut","cha","chay","chaw","chah","chahh","chai","chaiy","chaiw","chaix","chaiz","chainny","chak","chakk","cham","chamy","chamw","chamz","chan","chany","chanw","chanx","chanz","chang","changy","changw","changx","channy","channz","chapp","chat","chatt","chau","chauy","chauw","chaux","chauz","che","chey","chew","chex","chez","cheh","chehh","chenn","chenny","chennw","chennz","chi","chiy","chiw","chix","chiz","chia","chiay","chiaw","chiaz","chiah","chiahh","chiam","chiamw","chiamx","chiamz","chien","chieny","chienw","chienx","chienz","chiang","chiangy","chiangw","chiann","chianny","chiannw","chiannx","chiannz","chiap","chiapp","chiet","chiett","chiau","chiauy","chiauw","chiaux","chih","chihh","chek","chekk","chim","chimy","chimw","chimx","chin","chiny","chinw","chinx","chinz","ching","chingy","chingw","chingx","chingz","chinn","chinny","chinnw","chinnx","chinnz","chiur","chiury","chiurw","chiurh","chiurhh","chiok","chiong","chiongy","chiongw","chiongx","chiongz","chip","chipp","chit","chitt","chiu","chiuy","chiuw","chiuz","chiunn","chiunny","chiunnw","chiunnz","chng","chngy","chngw","chngx","chngz","chur","chury","churw","churx","churz","churh","chok","chokk","chong","chongy","chongw","chongx","chongz","cho","choy","choz","chu","chuy","chuw","chux","chuxz","chuay","chuax","chuaz","chuah","chuahh","chuainnz","chuan","chuany","chuanw","chuanx","chuanz","chuann","chuanny","chuannw","chuannx","chuannz","chuat","chuew","chuez","chuh","chui","chuiy","chuiw","chuix","chuiz","chun","chuny","chunw","chunx","chunz","chut","chutt","e","ey","ew","ex","ez","eh","ehh","enn","ennx","ek","ekk","gax","gaz","gaix","gaiz","gakk","gamy","gamx","gamz","gany","ganw","ganx","ganz","gangz","gaux","gew","gex","gez","giy","gix","giz","giax","giah","giahh","giamy","giamx","giamz","gieny","gienw","gienx","gienz","giang","giangw","giangz","giap","giapp","giet","giett","giaux","gekk","gimy","gimx","gimz","giny","ginx","ginz","gingy","gingx","giury","giurx","giurhh","giok","giokk","giongy","giuy","giux","gurx","gurz","gokk","gongx","gongz","gox","goz","guy","gux","guz","guay","guaz","guany","guanx","guanz","guatt","guez","guehh","guix","guiz","ha","haw","hax","haz","hah","hahh","hai","haiy","haix","haiz","hainn","hainnw","hainnx","hak","hakk","ham","hamy","hamw","hamx","hamz","han","hany","hanw","hanx","hanz","hang","hangw","hangx","hangz","hanny","hannx","hannz","hannh","hap","happ","hat","hatt","hau","hauy","hauw","haux","hauz","he","hey","hew","hex","hez","heh","hennw","hennx","hennh","hi","hiy","hiw","hix","hia","hiaz","hiah","hiahh","hiam","hiamy","hiamw","hiamx","hien","hieny","hienw","hienx","hienz","hiang","hiangy","hiangw","hiann","hianny","hiannw","hiannx","hiannz","hiannh","hiapp","hiet","hiett","hiau","hiauy","hiaux","hiauh","hek","hekk","him","himx","hin","hinx","hinz","hing","hingw","hingx","hingz","hinn","hinnw","hinnz","hiurx","hiurz","hiurh","hiurhh","hiok","hiong","hiongy","hiongw","hiongx","hip","hit","hitt","hiu","hiuy","hiuw","hiux","hiunn","hiunnhh","hmy","hmx","hmh","hmhh","hng","hngy","hngx","hngz","hngh","hnghh","hury","hurx","hurz","hurhh","hok","hokk","hong","hongy","hongw","hongx","hongz","honn","honny","honnw","honnh","ho","hoy","how","hox","hoz","hu","huy","huw","hux","huz","hua","huaw","huax","huaz","huah","huahh","huaix","huaiz","huainnx","huan","huany","huanw","huanx","huanz","huann","huanny","huannx","huannz","huat","huatt","hue","huey","huew","huex","huez","hueh","hui","huiy","huiw","huix","huiz","hun","huny","hunw","hunx","hunz","hut","hutt","i","iy","iw","ix","iz","ia","iay","iaw","iax","iaz","iah","iahh","iam","iamy","iamx","iamz","ien","ieny","ienw","ienx","iang","iangz","iann","ianny","iannw","iannx","iannz","iap","iapp","iet","iett","iau","iauy","iauw","iaux","iauz","iaunn","im","imy","imw","imx","in","iny","inw","inx","inz","ing","ingy","ingw","ingx","ingz","inn","inny","innw","innx","innz","iur","iury","iurx","iurh","iurhh","iok","iokk","iong","iongy","iongw","iongx","iongz","ip","it","itt","iu","iuy","iuw","iux","iuz","iunn","iunny","iunnx","iunnz","jiy","jix","jiz","jia","jiay","jiamy","jienx","jiangy","jiapp","jiett","jiauy","jiauw","jiaux","jimy","jimx","jimz","jinx","jinz","jiurz","jiok","jiokk","jiongy","jiongx","jiongz","jipp","jitt","jiux","juy","jux","juz","juahh","juex","juez","junz","ka","kay","kaw","kaz","kah","kai","kaiy","kaiw","kainn","kainnx","kak","kakk","kam","kamy","kamw","kamx","kan","kany","kanw","kang","kangy","kangw","kangx","kangz","kann","kanny","kannw","kannx","kap","kat","kau","kauy","kauw","kaux","kauz","kauh","ke","key","kew","kez","keh","kehh","kenn","kenny","kennw","ki","kiy","kiw","kix","kiz","kia","kiaw","kiaz","kiahh","kiam","kiamy","kiamw","kiamx","kien","kieny","kienw","kienz","kiann","kianny","kiannw","kiannx","kiannz","kiap","kiet","kiett","kiau","kiauy","kiaux","kiauz","kek","kekk","kim","kimy","kimw","kimz","kin","kiny","kinw","kinz","king","kingy","kingw","kingx","kingz","kinn","kinnw","kinnx","kiurw","kiurx","kiurz","kiurh","kiok","kiokk","kiong","kiongy","kiongx","kiongz","kip","kipp","kitt","kiu","kiuy","kiuw","kiux","kiuz","kiunn","kng","kngy","kngw","kur","kury","kurw","kurx","kurz","kurh","kok","kokk","kong","kongy","kongw","kongx","konnx","ko","koy","kow","kox","koz","ku","kuy","kuw","kuz","kua","kuay","kuaw","kuaz","kuah","kuai","kuaiy","kuaiw","kuainn","kuainny","kuainnz","kuan","kuany","kuanw","kuanx","kuanz","kuann","kuanny","kuannx","kuannz","kuat","kue","kuey","kuew","kueh","kui","kuiy","kuiw","kuix","kuiz","kun","kuny","kunw","kunx","kunz","kut","kutt","kha","khay","khaw","khah","khahh","khai","khaiy","khaiw","khainn","khainny","khak","khakk","kham","khamy","khamw","khan","khanw","khang","khangy","khangw","khann","khap","khapp","khat","khau","khauy","khauw","khe","khey","khew","khex","kheh","khehh","khenn","khennhh","khi","khiy","khiw","khix","khiz","khia","khiax","khiaz","khiah","khiakk","khiam","khiamw","khiamx","khiamz","khien","khieny","khienw","khienx","khiang","khiangw","khiap","khiet","khiett","khiau","khiauy","khiauw","khiauh","khih","khek","khim","khimy","khimx","khin","khiny","khinx","khing","khingy","khingw","khingx","khingz","khinnx","khiury","khiurw","khiurh","khiok","khiong","khiongy","khiongx","khip","khipp","khit","khitt","khiu","khiuy","khiux","khiuz","khiunn","khiunnz","khng","khngw","khur","khury","khurw","khurx","khok","khokk","khong","khongy","khongw","khongz","kho","khoy","khow","khu","khux","khuz","khua","khuay","khuaw","khuah","khuaiw","khuan","khuany","khuanw","khuanx","khuann","khuanny","khuannw","khuat","khue","khuew","khuex","khueh","khuh","khui","khuiy","khuiw","khun","khuny","khunw","khunx","khut","khutt","la","lax","laz","lah","lahh","laix","laiz","lak","lakk","lam","lamy","lamw","lamx","lamz","lan","lany","lanx","lanz","lang","langy","langw","langx","langz","lap","lapp","latt","lauy","lauw","laux","lauz","lauhh","le","ley","lew","lex","lez","leh","lehh","li","liy","liw","lix","liz","liah","liahh","liam","liamy","liamw","liamx","liamz","lien","lieny","lienx","lienz","liang","liangy","liangx","liangz","liap","liapp","liett","liauy","liauw","liaux","liauz","lihh","lek","lekk","lim","limy","limx","limz","lin","liny","linw","linx","limz","ling","lingy","lingw","lingx","lingz","liury","liurx","liurz","liurhh","liok","liokk","liongy","liongw","liongx","liongz","lipp","liu","liuy","liuw","liux","liuz","lng","lngy","lngw","lngx","lngz","lur","lury","lurw","lurx","lurz","lurh","lurhh","lok","lokk","long","longy","longw","longx","longz","loy","lox","loz","lu","luy","luw","lux","luz","luax","luaz","luah","luahh","luany","luanx","luanz","luatt","luex","luez","lui","luiy","luiw","luix","luiz","lun","luny","lunx","lunz","lut","lutt","my","mx","mz","ma","may","maw","max","maz","mai","maiy","maiw","maiz","mau","maux","mauz","mauh","me","mey","mex","mez","meh","mehh","mi","miy","mix","miz","miax","miaz","miauz","mih","mihh","mngy","mngx","mngz","mo","moy","mox","moz","moh","mohh","mua","muay","muax","muaz","muiy","muix","nay","naw","nax","naz","nah","nai","naiy","naiz","nauy","nauz","nauh","ne","nex","neh","ni","niy","nix","niz","niay","niax","niaz","niau","niauy","nih","niuy","niux","niuz","noy","noz","nuay","nuaw","nuax","nuaz","ng","ngy","ngw","ngx","ngz","ngay","ngaiz","ngaux","ngauz","ngey","ngez","ngeh","ngehh","ngiax","ngiau","ngiauy","ngiauh","ngiauhh","ngoy","ngox","ngoz","o","oy","ox","oz","ok","om","omz","ong","ongy","ongx","ongz","onn","onnw","pa","pay","paw","pax","paz","pah","pai","paiy","paiw","paix","paiz","pak","pakk","pan","pany","panx","panz","pang","pangy","pangw","pangx","pat","patt","pau","pauy","paux","pauz","pe","pey","pew","pex","pez","peh","pehh","penn","pennw","pennx","pennz","pi","piy","piw","pix","piz","piah","piak","piakk","pien","pieny","pienw","pienz","piangw","piangz","piann","pianny","piannw","piannx","piet","piett","piau","piauy","pih","pek","pekk","pin","piny","pinw","pinx","ping","pingy","pingw","pingx","pingz","pinn","pinny","pinnw","pinnz","piur","piury","piurz","pit","pitt","piu","png","pngy","pngz","pur","pury","purw","purx","purz","purh","purhh","pok","pokk","pongy","pongw","pongx","pongz","po","poy","pow","pox","poz","pu","puw","pux","puz","puaw","puah","puahh","puan","puanw","puanx","puanz","puann","puanny","puannw","puannx","puannz","puat","puatt","pue","puey","puew","puex","puez","pueh","puehh","puh","pui","puix","puiz","pun","puny","punw","punx","punz","put","putt","pha","phaw","phaz","phah","phaiw","phainny","phainnz","phak","phakk","phan","phan","phang","phangy","phangw","phangx","phangz","phannw","phannz","phau","phauy","phauw","phauz","phauhh","phe","phey","phew","phez","phenn","phennx","phennz","phi","phiy","phiw","phix","phiz","phiah","phiahh","phiak","phiakk","phien","phienw","phienx","phiang","phiangz","phiann","phianny","phiannx","phiet","phiau","phiauw","phiaux","phih","phihh","phek","phiny","phinx","phinz","phing","phingw","phingx","phingz","phinn","phinnw","phinnx","phinnz","phiurw","phiurx","phit","phngh","phur","phury","phurw","phurz","phurh","phok","phokk","phong","phongy","phongw","phongx","phongz","pho","phoy","phow","phox","phoz","phuy","phux","phuz","phuaw","phuah","phuahh","phuan","phuanx","phuanz","phuann","phuannw","phuannz","phuat","phue","phuey","phuew","phuex","phuez","phuehh","phuhh","phuiy","phuiw","phun","phuny","phunw","phunx","phut","phutt","sa","say","saw","sah","sahh","sai","saiy","saiw","saix","saiz","sak","sam","samy","samw","samx","san","sany","sanw","sang","sangy","sangw","sann","sannh","sap","sat","sau","sauw","se","sey","sew","sex","seh","sehh","senn","senny","sennw","si","siy","siw","six","siz","sia","siay","siaw","siax","siaz","siah","siahh","siak","siam","siamy","siamw","siamx","sien","sieny","sienw","sienx","sienz","siang","siangy","siangw","siangx","siangz","siann","sianny","siannw","siannx","siannz","siap","siapp","siet","siett","siau","siauy","siauw","siaux","siauz","sih","sihh","sek","sekk","sim","simy","simw","simx","simz","sin","sinw","sinx","sinz","sing","singy","singw","singx","singz","sinn","sinnw","sinnz","siur","siury","siurx","siurh","siurhh","siok","siokk","siong","siongy","siongw","siongx","siongz","sip","sipp","sit","sitt","siu","siuy","siuw","siux","siuz","siunn","siunny","siunnw","siunnx","siunnz","sng","sngy","sngw","sngx","sngh","sur","sury","surw","surx","surz","surh","sok","som","song","songy","songw","songx","so","soy","sow","su","suy","suw","sux","suz","sua","suay","suaw","suah","suai","suainnz","suan","suany","suanw","suanx","suanz","suann","suanny","suannw","suat","sue","suey","suew","suex","sueh","suh","sui","suiy","suiw","suix","suiz","sun","suny","sunw","sunx","sunz","sut","sutt","ta","tay","taw","tah","tahh","tai","taiy","taiw","taix","taiz","tainn","tainny","tak","takk","tam","tamy","tamw","tamx","tamz","tan","tany","tanw","tanx","tanz","tang","tangy","tangw","tangx","tangz","tann","tanny","tannw","tannx","tannz","tap","tapp","tat","tatt","tau","tauy","tauw","taux","tauz","tauh","tauhh","te","tey","tew","tex","tez","teh","tenn","tennw","tennz","ti","tiy","tiw","tix","tiz","tia","tiah","tiahh","tiak","tiakk","tiam","tiamy","tiamw","tiamx","tiamz","tien","tieny","tienx","tienz","tianny","tiannx","tiannz","tiap","tiapp","tiet","tiett","tiau","tiauw","tiaux","tiauz","tih","tihh","tek","tekk","timw","timx","timz","tin","tiny","tinw","tinx","tinz","ting","tingy","tingw","tingx","tingz","tinn","tinnx","tinnz","tinnhh","tiurw","tiurx","tiurz","tiurh","tiurhh","tiok","tiokk","tiong","tiongy","tiongw","tiongx","tiongz","tit","titt","tiu","tiuy","tiuw","tiux","tiuz","tiuh","tiunn","tiunny","tiunnw","tiunnx","tiunnz","tng","tngy","tngw","tngx","tngz","tur","tury","turw","turx","turz","turh","turhh","tok","tokk","tomx","tong","tongy","tongw","tongx","tongz","to","toy","tow","tox","toz","tu","tuy","tuw","tux","tuz","tuaw","tuaz","tuan","tuany","tuanw","tuanz","tuann","tuannw","tuannx","tuannz","tuat","tuatt","tuew","tuex","tuez","tuh","tuhh","tui","tuiw","tuix","tuiz","tun","tuny","tunw","tunz","tutt","thaw","thah","thahh","thai","thaiy","thaiw","thaix","thaiz","thak","thakk","tham","thamw","thamx","thamz","than","thany","thanw","thanx","thang","thangy","thangw","thangx","thann","thanny","thap","that","thau","thauy","thauw","thaux","thauz","the","they","thew","thex","thez","theh","thehh","thennw","thennx","thi","thiy","thiw","thix","thiz","thiah","thiam","thiamy","thiamz","thien","thieny","thiann","thiannw","thiannx","thiannz","thiap","thiapp","thiet","thiau","thiauy","thiauw","thiaux","thiauz","thih","thihh","thek","thekk","thim","thin","thinx","thinz","thing","thingy","thingw","thingx","thinn","thinnz","thiur","thiurw","thiurx","thiok","thiong","thiongy","thiongw","thiongx","thiu","thiuy","thng","thngw","thngx","thngz","thur","thury","thurw","thurx","thurh","thurhh","thok","thokk","thong","thongy","thongw","thongz","thoy","thow","thox","thuy","thua","thuaz","thuah","thuanx","thuann","thuanny","thuannw","thuat","thuh","thui","thuiy","thuiw","thuix","thun","thuny","thunx","thunz","thut","thutt","u","uy","uw","ux","uz","uh","ua","uay","uax","uahh","uai","uainny","uan","uany","uanw","uanx","uanz","uang","uann","uanny","uannw","uannz","uat","uatt","ue","uey","uew","uex","uez","ueh","ui","uiy","uiw","uix","uiz","un","uny","unw","unx","unz","ut","ur","urw","urx","urh","urhh"],Zr=/(m|ng?)hf/g,$r=/(m|ng?)h(w|x)/g,tg=function(e,a,n){return!(!xs.includes(e)||t.TonalLetterTags.h!==a||!zs.includes(n))},eg=/(j|l|s)f/g,ag=function(e,a){return!(!Cs.includes(e)||t.TonalLetterTags.f!==a)},ng=/(l|s)(w|x)/g,sg=function(t,e){return!(!Fs.includes(t)||!zs.includes(e))},rg=function(t,e){return!(!js.includes(t)||!zs.includes(e))},gg=function(t,e){return!(!Rt.includes(t)||!As.includes(e))};class og extends Ar{constructor(t){super(),this.soundsFollowing=t}handleAssimilatedFinal(t,e){const a=Ws.get(t.lastLetter.literal+e);if(a){const e=a.map((e=>{const a=Object.create(t);return a.replaceLetter(t.letters.length-1,S.get(e.toString())),a})),n=[];return e.map((t=>n.push(t))),e}return[]}apply(e,a){if(a){if(a instanceof k){if(a instanceof He){const t=new Nr(e.map((t=>new s(t.characters)))),a=Ea.get("zero");return a&&t.pushLetter(new s(a[0].characters)),[t]}{const t=[],n=Ea.get(a.toString()),r=n||[];for(let a in r){const n=new Nr(e.map((t=>new s(t.characters))));r[a]instanceof He?(n.popLetter(),t.push(n)):(n.popLetter(),n.pushLetter(new s(r[a].characters)),t.push(n))}return t}}if(a instanceof f){const n=new Nr(e.map((t=>new s(t.characters))));if(""===a.tonal.toString())return this.handleAssimilatedFinal(n,"");const r=n.letters[n.letters.length-1].literal,g=e.filter((e=>e.name===t.TonalSoundTags.nasalFinalConsonant));if(n.popLetter(),0!=g.length||r!==t.TonalLetterTags.w&&r!==t.TonalLetterTags.x||!Array.from(Gs.keys()).includes(n.lastLetter.literal)){if(Ws.has(n.lastLetter.literal)){const t=this.handleAssimilatedFinal(n,r);if(t&&t.length>0)return t}else if(e.filter((e=>e.name===t.TonalSoundTags.vowel)).length>0&&xs.includes(n.lastSecondLetter.literal)&&Bt.includes(n.lastLetter.literal)){if(this.soundsFollowing[0]&&this.soundsFollowing[0].name===t.TonalSoundTags.initialConsonant&&n.lastSecondLetter.literal===this.soundsFollowing[0].toString()){n.popLetter(),n.popLetter();const e=Object.create(n);return r===t.TonalLetterTags.w?e.pushLetter(S.get(t.TonalLetterTags.tt)):e.pushLetter(S.get(t.TonalLetterTags.t)),[e]}if(this.soundsFollowing[0]){n.popLetter(),n.popLetter();const e=Object.create(n);return r===t.TonalLetterTags.w?e.pushLetter(S.get(t.TonalLetterTags.pp)):e.pushLetter(S.get(t.TonalLetterTags.p)),[e]}}}else{const e=n.lastLetter.literal;n.popLetter();const a=Gs.get(e);a&&(Jr(n.literal+S.get(a).literal)?n.pushLetter(S.get(a)):2===n.letters.length&&n.letters[0].literal===t.TonalLetterTags.t&&n.letters[1].literal===t.TonalLetterTags.i&&e===t.TonalLetterTags.k?(n.popLetter(),n.pushLetter(S.get(t.TonalLetterTags.e)),n.pushLetter(S.get(t.TonalLetterTags.kk))):n.pushLetter(S.get(e)))}return[n]}}return[]}}class lg extends Ar{getUncombiningForms(e,a){if(Vs.has(a[a.length-2].toString())){const t=Vs.get(e.lastLetter.literal+a[a.length-1].toString());t&&e.replaceLetter(e.letters.length-1,S.get(t))}else if(Gs.has(a[a.length-2].toString())&&a[a.length-1].toString()===t.TonalLetterTags.x){const t=Gs.get(e.lastLetter.literal);t&&e.replaceLetter(e.letters.length-1,S.get(t))}}apply(e,a){if(a)if(a.tonal.toString()===t.TonalLetterTags.f){if(a instanceof k){const t=[],n=Ia.get(a.toString()),r=n||[];for(let a in r){let n=new Nr(e.map((t=>new s(t.characters))));n.popLetter(),n.pushLetter(new s(r[a].characters)),t.push(n)}return t}if(a instanceof f){const t=new Nr(e.map((t=>new s(t.characters))));return t.popLetter(),this.getUncombiningForms(t,e),[t]}}else if(a.tonal.toString()===t.TonalLetterTags.x){if(a instanceof k){const t=[],n=Ia.get(a.toString()),r=n||[];for(let a in r){let n=new Nr(e.map((t=>new s(t.characters))));r[a]instanceof Tt?(n.popLetter(),t.push(n)):r[a]instanceof ht?(n.popLetter(),n.pushLetter(new s(r[a].characters)),t.push(n)):r[a]instanceof wt&&t.push(n)}return t}if(a instanceof f){const t=new Nr(e.map((t=>new s(t.characters))));return t.popLetter(),this.getUncombiningForms(t,e),[t]}}else if(a.tonal.toString()===t.TonalLetterTags.y)return[];return[]}}class ig extends Ar{constructor(t){super(),this.lettersLastSyllable=t}apply(t,e){if(e){if(this.lettersLastSyllable[this.lettersLastSyllable.length-1].toString()===t[t.length-1].toString())return[];return[new Nr(this.lettersLastSyllable.map((t=>new s(t.characters))))]}return[]}}class Tg extends Ar{apply(e,a){if(a){const a=e.filter((e=>e.toString()===t.TonalLetterTags.a)),n=e.filter((e=>e.name===t.TonalSoundTags.checkedTone)),r=new Nr(e.map((t=>new s(t.characters))));if(1==a.length)return r.popLetter(),r.pushLetter(S.get(t.TonalLetterTags.y)),[r];if(1==n.length){r.popLetter();const t=Object.create(r),e=Hs.get(r.letters[r.letters.length-1].literal);return e&&(t.popLetter(),t.pushLetter(S.get(e))),[r,t]}{r.popLetter();const e=Object.create(r),a=Object.create(r),n=Object.create(r);return e.pushLetter(S.get(t.TonalLetterTags.y)),a.popLetter(),a.pushLetter(S.get(t.TonalLetterTags.x)),n.popLetter(),n.pushLetter(S.get(t.TonalLetterTags.z)),[r,e,a,n]}}return[]}}class hg extends Ar{apply(e,a){if(a){const a=e.filter((e=>e.name===t.TonalSoundTags.initialConsonant)),n=e.filter((e=>e.name===t.TonalSoundTags.checkedTone));if(a.length>0&&n.length>0){if(n[0].toString()===t.TonalLetterTags.f){return[new Nr([new s(a[0].characters),S.get(t.TonalLetterTags.e),S.get(t.TonalLetterTags.k)])]}if(n[0].toString()===t.TonalLetterTags.w){return[new Nr([new s(a[0].characters),S.get(t.TonalLetterTags.e),S.get(t.TonalLetterTags.kk)])]}}}return[]}}class cg extends Er{apply(t,e){return this.populateLemmata(t,e)}getLemmas(t,e){if(e){if(e instanceof Gr){const e=[],a=t[t.length-1].getForms();for(const n in a){const s=new Rr(t.map((t=>t.syllable)));s.popSyllable(),s.pushSyllable(a[n]),e.push(s)}return e}if(e instanceof Ur){if(0==t[t.length-1].getForms().length)return[];const e=new Rr(t.map((t=>t.syllable)));return e.popSyllable(),e.pushSyllable(t[t.length-1].getForms()[0]),[e]}}return[]}populateLemmata(t,e){let a=new Array,n=this.getLemmas(t,e);if(n.length>0)for(let t in n)a.push(n[t]);return a}}class Lg{make(t,e){return p(t,e)}}class ug{}class pg extends w{constructor(t,e){super(),this.lemmata=new Array,0==t.length?this.word=new Rr([]):this.word=new Rr(t.map((t=>t.syllable))),t.length>0&&t[t.length-1].allomorph?this.endingInflectional=this.assignInflectionalEnding(t[t.length-1].allomorph):this.endingInflectional=new qr,t.length>0&&(this.lemmata=e.apply(t,this.endingInflectional))}getLemmas(){return this.lemmata}getInflectionalEnding(){return this.endingInflectional?this.endingInflectional.toString():""}assignInflectionalEnding(t){let e=new qr;if(t instanceof k){let a=new Gr;a.affix.tonal=t.tonal,e=a}else if(t instanceof f){let a=new Ur;a.affix.tonal=t.tonal,e=a}return e}}class wg extends ug{constructor(){super()}makeLexemes(t){return this.make(t)}make(t){return new pg(t,new cg)}}function Kg(e){if(Jt.includes(e.letters[e.matchedSounds.length])){const a=De.get(e.letters[e.matchedSounds.length]);if(a){const n=a(t.TonalSoundTags.initialConsonant);n&&e.matchedSounds.push(n)}}else e.matching=!1;return e}function mg(e){if(!e.matching)return e;if(Yt.includes(e.letters[e.matchedSounds.length])){const a=De.get(e.letters[e.matchedSounds.length]);if(a){const n=a(t.TonalSoundTags.stopFinalConsonant);n&&e.matchedSounds.push(n)}}else e.matching=!1,e.letters.length==e.matchedSounds.length&&e.predictive&&e.predictions.push(Yt.sounds);return e}function dg(e){if(!e.matching)return e;if(Bt.includes(e.letters[e.matchedSounds.length])){const a=De.get(e.letters[e.matchedSounds.length]);if(a){const n=a(t.TonalSoundTags.stopFinalConsonant);n&&e.matchedSounds.push(n)}}else e.matching=!1,e.letters.length==e.matchedSounds.length&&e.predictive&&e.predictions.push(Bt.sounds);return e}function kg(e){if(!e.matching||0==e.letters.length)return e;if(Ht.includes(e.letters[e.matchedSounds.length])){const a=De.get(e.letters[e.matchedSounds.length]);if(a){const n=a(t.TonalSoundTags.nasalFinalConsonant);n&&e.matchedSounds.push(n)}}else e.matching=!1,e.letters.length==e.matchedSounds.length&&e.predictive&&e.predictions.push(Ht.sounds);return e}function fg(e){if(!e.matching)return e;let a=!0,n=0;for(let s=e.matchedSounds.length;s<e.letters.length;s++){if(!Rt.includes(e.letters[s])){a=!1,0==n&&(e.matching=!1);break}{a=!0;const r=De.get(e.letters[s]);if(r){const a=r(t.TonalSoundTags.vowel);n++,a&&e.matchedSounds.push(a)}}}return a&&(e.predictive&&e.letters.length>0&&e.predictions.push(Rt.sounds),e.matching=!0),e}function yg(e){if(_t.includes(e.letters[e.matchedSounds.length])){const a=De.get(e.letters[e.matchedSounds.length]);if(a){const n=a(t.TonalSoundTags.vowel);n&&e.matchedSounds.push(n)}}else e.matching=!1;return e}function xg(e){if(!e.matching)return e;if(Dt.includes(e.letters[e.matchedSounds.length])){const a=De.get(e.letters[e.matchedSounds.length]);if(a){const n=a(t.TonalSoundTags.nasalization);n&&e.matchedSounds.push(n)}}else e.matching=!1,e.letters.length==e.matchedSounds.length&&e.predictive&&e.predictions.push(Dt.sounds);return e}function Sg(e){if(!e.matching)return e;if(Qt.includes(e.letters[e.matchedSounds.length])){const a=De.get(e.letters[e.matchedSounds.length]);if(a){const n=a(t.TonalSoundTags.freeTone);n&&e.matchedSounds.push(n)}}else e.matching=!1,e.letters.length==e.matchedSounds.length&&e.predictive&&e.predictions.push(Qt.sounds);return e}function zg(e){if(!e.matching)return e;if(Xt.includes(e.letters[e.matchedSounds.length])){const a=De.get(e.letters[e.matchedSounds.length]);if(a){const n=a(t.TonalSoundTags.checkedTone);n&&e.matchedSounds.push(n)}}else e.matching=!1,e.letters.length==e.matchedSounds.length&&e.predictive&&e.predictions.push(Xt.sounds);return e}function bg(e){if(!e.matching)return e;if(Zt.includes(e.letters[e.matchedSounds.length])||$t.includes(e.letters[e.matchedSounds.length])){const a=De.get(e.letters[e.matchedSounds.length]);if(a){const n=a(t.TonalSoundTags.stopFinalConsonant);n&&e.matchedSounds.push(n)}}else e.matching=!1,e.letters.length==e.matchedSounds.length&&e.predictive&&e.predictSandhiFinalConsonant&&(e.predictions.push(Zt.sounds),e.predictions.push($t.sounds));return e}const Cg=[T(fg),T(yg),T(fg,Sg),T(yg,Sg),T(yg,dg),T(Kg,fg),T(fg,mg),T(fg,kg),T(fg,mg,zg),T(fg,kg,Sg),T(Kg,fg,Sg),T(Kg,fg,mg),T(Kg,fg,kg),T(Kg,fg,mg,zg),T(Kg,fg,kg,Sg),T(Kg,fg,kg,dg),T(fg,kg,dg,zg),T(Kg,kg),T(Kg,kg,Sg),T(Kg,kg,dg),T(Kg,kg,dg,zg),T(fg,xg),T(fg,xg,Sg),T(fg,xg,dg),T(Kg,fg,xg),T(Kg,fg,xg,Sg),T(Kg,fg,xg,dg),T(Kg,fg,xg,dg,zg),T(fg,bg),T(fg,bg,zg),T(Kg,fg,bg),T(Kg,fg,bg,zg),T(Kg,fg,kg,dg,zg)];class jg{isStopFinal(t){return!!Yt.includes(t)}genChecked(t){const e=Ss.get(t[t.length-1]);let a=new Array;if(a.push(t),e)for(let n in e){let s=new Array;Object.assign(s,t),s.push(S.get(e[n]).literal),a.push(s)}return a}generate(t){let e=new Array;const a=new Array;this.isStopFinal(t[t.length-1])?e=this.genChecked(t):e.push(t);for(let t in e)for(let n=0;n<Cg.length;n++){let s=new h;if(s.letters=e[t],s=Cg[n](s),s.letters.length==s.matchedSounds.length&&1==s.matching){a.push(s.matchedSounds);break}}return a}}function Fg(e,a){let n="",s="",r=0,g=new Array,o=new Array,l="",i="";for(let c=a;c<e.length;c++){n+=e[c].literal,g.push(e[c].literal);const K=Gs.has(e[c].literal);if(c+1<e.length&&K&&(t.TonalLetterTags.w===e[c+1].literal||t.TonalLetterTags.x===e[c+1].literal)){const t=Gs.get(e[c].literal);t&&(i=l.slice(0,l.length)+t,l+=e[c].literal)}else l+=e[c].literal;if(Jr(n)&&Qt.includes(e[c].literal)){r===a&&(s=n,Object.assign(o,g));break}if((Jr(l)||Jr(i))&&Yt.includes(e[c].literal)){r===a&&(s=n,Object.assign(o,g));break}if(Qt.includes(e[c].literal)){if(n.length>1&&e[c]&&e[c-1]&&(p=e[c-1].literal,w=e[c].literal,js.includes(p)&&t.TonalLetterTags.f===w||rg(e[c-1].literal,e[c].literal)||ag(e[c-1].literal,e[c].literal)||sg(e[c-1].literal,e[c].literal))){s=n,Object.assign(o,g);break}if(n.length>2&&e[c]&&e[c-1]&&e[c-2]&&tg(e[c-2].literal,e[c-1].literal,e[c].literal)){s=n,Object.assign(o,g);break}n.length>1&&e[c]&&e[c-1]&&(L=e[c-1].literal,u=e[c].literal,As.includes(L)&&Qt.includes(u));const r=Ea.get(e[c].literal),l=r?r.map((t=>t.toString())):[],i=Ia.get(e[c].literal),T=i?i.map((t=>t.toString())):[],h=l.concat(T.filter((t=>l.indexOf(t)<0)));if(h.length>0){for(let t of h)if(Jr(e.slice(a,c).map((t=>t.literal)).join("")+t)){s=n,Object.assign(o,g);break}if(s.length>0&&o.length>0)break}else s="",o=[]}else if(Jr(n))s=n,Object.assign(o,g),r=a;else{if(Ns.includes(e[c].literal)){const t=e.map(((t,e,n)=>e<c&&e>=a?n[e].literal:"")).join(""),r=Ws.get(e[c].literal);if(r){r.map((e=>Jr(t+e))).reduce(((t,e,a,n)=>t||e))&&(s=n,Object.assign(o,g))}}else if(T=g[g.length-2],h=g[g.length-1],T===t.TonalLetterTags.i&&h===t.TonalLetterTags.k)s=n,Object.assign(o,g);else if(gg(g[g.length-2],g[g.length-1]));else if(!Qt.includes(e[c].literal)){const e=Ea.get(t.TonalLetterTags.zero),a=e||[];for(let t of a)Jr(n+t.toString())&&(s=n,Object.assign(o,g))}r=a}}var T,h,L,u,p,w;s.length>0&&n.length>s.length&&(s="",o=[]);const K=new jg;let m=new Array;if(s.length>0)m=K.generate(o);else if(3==g.length&&"a"===g[1]&&"y"===g[2]){const t=(new jr).applyToString(n);bs.includes(g[0])&&Jr(t)&&(m=K.generate(g))}let d=0,k=new c;for(let t in m){const n=Math.min(e.length-a,m[t].length);if(m[t].length==n)for(let s=0;s<n;s++)if(null!=m[t][s]){if(e[a+s].literal!==m[t][s].toString())break;if(s+1==n&&n>d){d=n;for(let t=0;t<d;t++)k.letters[t]=e[a+t];k.pattern=m[t]}}}return k}class Ag extends L{constructor(t,e,a){super(),this.syllable=t,this.metaplasm=a,this.sounds=e,this.allomorph=this.assignAllomorph(this.sounds),this.forms=this.metaplasm.apply(this.sounds,this.allomorph)}getForms(){return this.forms}addForms(t){t&&1==t.length&&this.forms.push(t[0])}assignAllomorph(e){let a=new He,n=[];const r=new Nr(e.map((t=>new s(t.characters)))),g=Array.from(va.keys());for(let t=0;t<g.length;t++){const e=va.get(g[t]);if(e&&e instanceof f&&e.tonal){if(e.tonal.toString()===r.lastLetter.literal&&e.final.toString()===r.lastSecondLetter.literal){n.push(e);break}if(e.final.toString()===r.lastLetter.literal){n.push(e);break}}}if(n.length>0){const t=n.shift();if(t)return t}if(n=[],Ye.has(r.lastLetter.literal)){const a=Ye.get(r.lastLetter.literal),s=e.filter((e=>e.name===t.TonalSoundTags.stopFinalConsonant)),g=e.filter((e=>e.name===t.TonalSoundTags.checkedTone));!a||1==s.length&&2==s[0].toString().length&&1==g.length?n.push(new d):n.push(a)}if(0==n.length)a=new He;else if(1==n.length)for(let t=0;t<n.length;t++)a=(n[t].tonal.toString(),(new Qe).tonal.toString(),n[t]);return a}}class vg extends Lg{constructor(t){super(),this.sandhiFinals=new Array,this.sandhiFinalTonals=new Array,this.metaplasm=t}createArray(){return new Array}createMorpheme(t,e){return new Ag(new Nr(t.letters),t.pattern,e)}isCombiningAy(e){const a=Array.from(Ia.keys());if(e.length>=2){const n=e[e.length-2].pattern.filter((e=>e.name===t.TonalSoundTags.nasalFinalConsonant)),s=e[e.length-2].pattern.filter((e=>e.name===t.TonalSoundTags.stopFinalConsonant&&e.toString()===t.TonalLetterTags.h)),r=e[e.length-2].pattern.filter((e=>(e.name===t.TonalSoundTags.nasalFinalConsonant||e.name===t.TonalSoundTags.checkedTone)&&a.includes(e.toString()))),g=e[e.length-1].pattern.filter((e=>e.name===t.TonalSoundTags.initialConsonant&&ys.includes(e.toString()))),o=e[e.length-1].lastSecondLetter.literal===t.TonalLetterTags.a&&e[e.length-1].lastLetter.literal===t.TonalLetterTags.y,l=e[e.length-1].lastLetter.literal===t.TonalLetterTags.a;if((1!=n.length||1!=s.length||1!=r.length)&&(o||l)){if(1==g.length&&0==n.length)return!1;const a=e[e.length-1].pattern.filter((e=>e.name===t.TonalSoundTags.initialConsonant&&Jt.includes(e.toString()))),r=e[e.length-1].pattern.filter((e=>e.name===t.TonalSoundTags.vowel));return(0!=s.length||1!=n.length||1!=a.length||n[0].toString()==a[0].toString())&&!(1==a.length&&r.length>1)}}return!1}isTransfixInflection(e){const a=e.map((e=>e.pattern.filter((e=>e.toString()===t.TonalLetterTags.w)))).map((t=>t.map((t=>t.toString())))).filter((t=>t.length>0)),n=e[e.length-1].lastSecondLetter.literal===t.TonalLetterTags.a;return!!(e.length>1&&a.length==e.length&&n)}isDoublet(e){if(2==e.length){const a=e.map((e=>e.pattern.filter((e=>e.name!==t.TonalSoundTags.freeTone)))).map((t=>t.map((t=>t.toString())).join("")));if(e.map((e=>e.pattern.filter((e=>e.name===t.TonalSoundTags.freeTone)))).map((t=>t.map((t=>t.toString())).join(""))),a[0]===a[1])return!0}return!1}isTriplet(e){if(3==e.length){const a=e.map((e=>e.pattern.filter((e=>e.name!==t.TonalSoundTags.freeTone&&e.name!==t.TonalSoundTags.checkedTone)))).map((t=>t.map((t=>t.toString())).join(""))),n=e.map((e=>e.pattern.filter((e=>e.name===t.TonalSoundTags.stopFinalConsonant)))).map((t=>t.map((t=>t.toString())).join("")));if(e.map((e=>e.pattern.filter((e=>e.name===t.TonalSoundTags.freeTone)))).map((t=>t.map((t=>t.toString())).join(""))),n&&n.length>0){if(a[0]===a[1]&&a[0]+n[0]===a[2])return!0}else if(a.every(((t,e,a)=>t===a[a.length-1])))return!0}return!1}isEKekkAvailableRimeIet(e){if(e.length>=2){const a=e[e.length-2].pattern.filter((e=>e.name===t.TonalSoundTags.vowel)),n=e[e.length-2].pattern.filter((e=>e.name===t.TonalSoundTags.stopFinalConsonant)),s=e[e.length-2].pattern.filter((e=>e.name===t.TonalSoundTags.checkedTone));if(2==a.length&&1==n.length&&1==s.length&&a[0].toString()===t.TonalLetterTags.i&&a[1].toString()===t.TonalLetterTags.e&&n[0].toString()===t.TonalLetterTags.t&&(s[0].toString()===t.TonalLetterTags.f||s[0].toString()===t.TonalLetterTags.w))return!0}return!1}isIengUamToneLetter(t){return!1}preprocessSandhiFinal(t){return this.sandhiFinals.push(t[t.length-1]),t.slice(0,t.length-1)}preprocessSandhiFinalTonal(e,a,n,s){const r=a.match(n);let g=-1;if(1==s){for(let t=0;t<e.length-1;t++)if(ag(e[t].literal,e[t+1].literal)||sg(e[t].literal,e[t+1].literal)){g=t;break}}else if(2==s)for(let a=0;a<e.length-2;a++)if(o=e[a].literal,l=e[a+1].literal,i=e[a+2].literal,xs.includes(o)&&t.TonalLetterTags.h===l&&t.TonalLetterTags.f===i||tg(e[a].literal,e[a+1].literal,e[a+2].literal)){g=a;break}var o,l,i;if(r)for(let n in r){const o=a.search(r[n]),l=a.substring(0,o),i=a.substring(o+r[n].length);if(Jt.includes(l))return e;let T;t.TonalLetterTags.f===r[n].charAt(r[n].length-1)?(a=l.concat(t.TonalLetterTags.t+t.TonalLetterTags.f,i),T=e.splice(g,s,S.get(t.TonalLetterTags.t))):zs.includes(r[n].charAt(r[n].length-1))&&(r[n].charAt(r[n].length-1)===t.TonalLetterTags.w?a=r[0][0]===i[0]?l.concat(t.TonalLetterTags.t+t.TonalLetterTags.w,i):l.concat(t.TonalLetterTags.p+t.TonalLetterTags.w,i):r[n].charAt(r[n].length-1)===t.TonalLetterTags.x&&(a=r[0][0]===i[0]?l.concat(t.TonalLetterTags.t+t.TonalLetterTags.x,i):l.concat(t.TonalLetterTags.p+t.TonalLetterTags.x,i)),r[0][0]===i[0]||r[0][0]===t.TonalLetterTags.l&&i[0]===t.TonalLetterTags.j?T=e.splice(g,s,S.get(t.TonalLetterTags.t)):r[0][0]===t.TonalLetterTags.h&&(T=e.splice(g,s,S.get(t.TonalLetterTags.p)))),T&&1==s?this.sandhiFinalTonals.push({index:g,letters:[T[0]]}):T&&2==s&&this.sandhiFinalTonals.push({index:g,letters:[T[0],T[1]]})}return e}replaceSandhiFinal(e){const a=e.slice(0,e.length-1).map((t=>t.literal)).join("");if(e.length>0&&e[e.length-1].literal===t.TonalLetterTags.gg&&Jr(a+t.TonalLetterTags.tt)&&!Jr(a+t.TonalLetterTags.kk)){const a=this.preprocessSandhiFinal(e);return a.push(S.get(t.TonalLetterTags.tt)),a}if(e.length>0&&e[e.length-1].literal===t.TonalLetterTags.b&&Jr(a+t.TonalLetterTags.p)){const a=this.preprocessSandhiFinal(e);return a.push(S.get(t.TonalLetterTags.p)),a}return e}replaceSandhiFinalTonal(t){let e=t.map((t=>t.literal)).join("");if(e.length>1&&eg.test(e)){return this.preprocessSandhiFinalTonal(t,e,eg,1)}if(e.length>1&&ng.test(e)){return this.preprocessSandhiFinalTonal(t,e,ng,1)}if(e.length>2&&Zr.test(e)){return this.preprocessSandhiFinalTonal(t,e,Zr,2)}if(e.length>2&&$r.test(e)){return this.preprocessSandhiFinalTonal(t,e,$r,2)}return t}preprocess(t){let e=new Array;return e=t.map((t=>t.letter)),e=this.replaceSandhiFinal(e),e=this.replaceSandhiFinalTonal(e),e}postprocessSandhiPPpttt(e,a){if((e.letters[e.letters.length-1].literal===t.TonalLetterTags.t||e.letters[e.letters.length-1].literal===t.TonalLetterTags.tt||e.letters[e.letters.length-1].literal===t.TonalLetterTags.p)&&this.sandhiFinals.length>0){e.letters.pop(),e.pattern.pop();const a=this.sandhiFinals.pop();if(a){e.letters.push(a);const n=De.get(a.literal);n&&e.pattern.push(n(t.TonalSoundTags.stopFinalConsonant))}}else if(this.sandhiFinalTonals.length>0&&Us.includes(e.letters[e.letters.length-2].literal)){const n=this.sandhiFinalTonals.pop();if(n)if(1==n.letters.length){e.letters.splice(n.index,1,n.letters[0]);const a=De.get(n.letters[0].literal);a&&e.pattern.splice(n.index,1,a(t.TonalSoundTags.stopFinalConsonant))}else if(2==n.letters.length){e.letters.splice(n.index-a,1,n.letters[0],n.letters[1]);const s=De.get(n.letters[0].literal),r=De.get(n.letters[1].literal);s&&r&&e.pattern.splice(n.index-a,1,s(t.TonalSoundTags.nasalFinalConsonant),r(t.TonalSoundTags.stopFinalConsonant))}}return e}postprocess(t){const e=this.createArray();for(let a=0;a<t.length;a++){const n=t.map(((t,e)=>e<a?t.letters.length:0)).reduce(((t,e)=>t+e)),s=this.postprocessSandhiPPpttt(t[a],n);if(this.isCombiningAy(t)&&2==t.length)e.push(this.createMorpheme(s,new lg));else if(!this.isCombiningAy(t)||3!=t.length&&4!=t.length)if(this.isTriplet(t))e.push(this.createMorpheme(s,new ig(t[2].pattern)));else if(this.isDoublet(t))e.push(this.createMorpheme(s,new ig(t[1].pattern)));else if(this.isTransfixInflection(t))e.push(this.createMorpheme(s,new Tg));else if(a<t.length-1?e.push(this.createMorpheme(s,new og(t[a+1].pattern))):e.push(this.createMorpheme(s,this.metaplasm)),this.isEKekkAvailableRimeIet(t)&&a<t.length-1){const t=this.createMorpheme(s,new hg).getForms();t&&1==t.length&&e[a].addForms(t)}else this.isIengUamToneLetter(t)&&t.length;else a==t.length-2||a==t.length-1?e.push(this.createMorpheme(s,new lg)):(a==t.length-3||4==t.length&&a==t.length-4)&&e.push(this.createMorpheme(s,new og(t[a+1].pattern)))}return e}makeMorphemes(t){const e=this.preprocess(t),a=this.make(e,Fg);return this.postprocess(a)}}function Mg(t){return new o(S).makeGraphemes(t)}const Pg={morphAnalyze(t,e){let a=[];"object"==typeof t?a=t:"string"==typeof t&&(a=Mg(t));return new vg(e).makeMorphemes(a)},lexAnalyze(t){let e=[];"object"==typeof t?e=t:"string"==typeof t&&(e=this.morphAnalyze(t,new og([])));return(new wg).makeLexemes(e)}};function Og(t){let e=["","",""],a=ps.get("chu");return a&&(e[0]+=a[0],e[1]+=a[1],e[2]+=a[1]),a=ms.get(t),a&&(e[0]+=a[0],e[1]+=a[1],e[2]+=a[1]),e}function Eg(t){let e=ms.get(t);return null==e&&(e=ds.get(t)),null==e&&(e=ks.get(t)),e}function Ig(t){if(Ks.has(t))return Ks.get(t)}function Vg(t){if(En.includes(t.letters[t.matchedSounds.length])){const e=us.get(t.letters[t.matchedSounds.length]);if(e){const a=e(Wa.initialConsonant);a&&t.matchedSounds.push(a)}}else t.matching=!1;return t}function Ng(t){if(Nn.includes(t.letters[t.matchedSounds.length])){const e=us.get(t.letters[t.matchedSounds.length]);if(e){const a=e(Wa.semivowel);a&&t.matchedSounds.push(a)}}return t}function Wg(t){if(In.includes(t.letters[t.matchedSounds.length])){const e=us.get(t.letters[t.matchedSounds.length]);if(e){const a=e(Wa.vowel);a&&t.matchedSounds.push(a)}}return t}function qg(t){if(Wn.includes(t.letters[t.matchedSounds.length])){const e=us.get(t.letters[t.matchedSounds.length]);if(e){const a=e(Wa.finalConsonant);a&&t.matchedSounds.push(a)}}return t}const Gg=T(Wg),Ug=T(Vg,Wg),Dg=T(Wg,qg),Hg=T(Vg,Wg,qg),Bg=T(Vg,Ng,Wg),Rg=T(Vg,Ng,Wg,qg),_g=T((function(t){if(Vn.includes(t.letters[t.matchedSounds.length])){const e=us.get(t.letters[t.matchedSounds.length]);if(e){const a=e(Wa.geminatedConsonant);a&&t.matchedSounds.push(a)}}return t}),Vg,Wg);class Jg{constructor(){this.sylCompositions=[Gg,Ug,Dg,Hg,Bg,Rg,_g]}genSokuonAndGeminated(t,e){let a=new Array;if(a.push(t),1==Vn.includes(t[0])){let e=new Array;e.push(t[0].charAt(0));for(let a of t)e.push(a);a.push(e)}let n=Wn;for(let s of n.sounds){let n=new Array;Object.assign(n,t),n.push(s.toString()),s.toString()===e&&a.push(n)}return a}generate(t,e){let a=new Array,n=new Array;a=this.genSokuonAndGeminated(t,e);for(let t in a)for(let e=0;e<this.sylCompositions.length;e++){let s=new h;if(s.letters=a[t],s=this.sylCompositions[e](s),s.letters.length==s.matchedSounds.length&&1==s.matching){n.push(s.matchedSounds);break}}return n}}class Qg extends u{}class Xg extends L{constructor(t,e,a){super(),this.syllable=t,this.sounds=new Array,this.sounds=e}}function Yg(e,a){let n="",s="",r="",g=new Array,o=new Array;for(let l=a;l<e.length;l++)n+=e[l].literal,g.push(e[l].literal),ms.has(n)||ds.has(n)?(s=n,Object.assign(o,g),l+1<e.length&&(r=e[l+1].literal)):3==n.length&&e[0].literal===t.KanaLetterTags.ng&&In.includes(e[1].literal)?(s=n,Object.assign(o,g)):3==g.length&&(g[0]===g[1]||g[0]===t.KanaLetterTags.t&&g[1]===t.KanaLetterTags.ch)&&In.includes(g[2])||Wn.includes(r)&&l+1==e.length?(s=n,Object.assign(o,g),r=""):Vn.includes(r)&&l+1<e.length?(En.includes(e[l+1].literal)&&(r===e[l+1].literal||r===t.KanaLetterTags.t&&e[l+1].literal===t.KanaLetterTags.ch)?(s=n,Object.assign(o,g)):(In.includes(e[l+1].literal)||Nn.includes(e[l+1].literal))&&(s=n.slice(0,n.length-1),g.pop(),Object.assign(o,g)),r=""):qn.includes(r)&&(In.includes(e[l+1].literal)||Nn.includes(e[l+1].literal)?(s=n.slice(0,n.length-1),g.pop(),Object.assign(o,g)):(s=n,Object.assign(o,g)),r="");let l=new Array;if(s.length>0){l=(new Jg).generate(o,r)}let i=new Array,T=new c,h=new Array;for(let t in l){let n=Math.min(e.length-a,l[t].length);if(l[t].length==n)for(let s=0;s<n;s++)if(null!=l[t][s]){if(e[a+s].literal!==l[t][s].toString())break;if(s+1==n){let s=new Array;for(let t=0;t<n;t++)s[t]=e[a+t];i.push(s),h=l[t]}}}if(1==i.length){for(let t=0;t<i[0].length;t++)T.letters[t]=e[a+t],T.pattern[t]=h[t];return T}if(i.length>1){let t=-1,n=-1,s=0;for(let t=0;t<i.length;t++)i[t].length>i[s].length&&(s=t);if(s>0?(t=s,n=0):(t=0,n=1),e.length-a==i[t].length){if(qn.includes(i[t][i[t].length-1].literal)){for(let n=0;n<i[t].length;n++)T.letters[n]=e[a+n],T.pattern[n]=h[n];return T}for(let t=0;t<i[n].length;t++)T.letters[t]=e[a+t],T.pattern[t]=h[t];return T}if(e.length-a==i[t].length+1){if(1==En.includes(e[a+i[t].length].literal))for(let n=0;n<i[t].length;n++)T.letters[n]=e[a+n],T.pattern[n]=h[n];else for(let t=0;t<i[n].length;t++)T.letters[t]=e[a+t],T.pattern[t]=h[t];return T}if(e.length-a>i[t].length+1){if(1==In.includes(e[a+i[t].length].literal)||1==Nn.includes(e[a+i[t].length].literal)){for(let t=0;t<i[n].length;t++)T.letters[t]=e[a+t],T.pattern[t]=h[t];return T}for(let n=0;n<i[t].length;n++)T.letters[n]=e[a+n],T.pattern[n]=h[n]}}return T}class Zg extends Lg{constructor(t){super(),this.metaplasm=t}createArray(){return new Array}createMorpheme(t){return new Xg(new Qg(t.letters),t.pattern,this.metaplasm)}postprocess(t){let e=this.createArray();for(let a in t)e.push(this.createMorpheme(t[a]));return e}makeMorphemes(t){const e=t.map((t=>t.letter)),a=this.make(e,Yg);return this.postprocess(a)}}function $g(t){return new o(Na).makeGraphemes(t)}const to={morphAnalyze(t){let e=[];"object"==typeof t?e=t:"string"==typeof t&&(e=$g(t));return new Zg(new Fr).makeMorphemes(e)}};class eo{constructor(){this.word=new K,this.lemmas=new Array,this.inflectionalEnding="",this.soundSequences=new Array,this.blockSequences=[],this.uncombiningSequences=new Array}}class ao extends L{constructor(t,e,a){super(),this.syllable=t,this.metaplasm=a,this.allomorph=this.assignAllomorph(this.syllable),this.sounds=e,this.forms=this.metaplasm.apply(this.sounds,this.allomorph)}getForms(){return this.forms}isAy(){return this.sounds[this.sounds.length-1].toString()===t.TonalLetterTags.y&&this.sounds[this.sounds.length-2].toString()===t.TonalLetterTags.a}assignAllomorph(t){if(Pa.has(t.lastLetter.literal)){const e=Pa.get(t.lastLetter.literal);return e||new d}if(Xt.includes(t.lastLetter.literal)&&(Pa.has(t.lastSecondLetter.literal)||Ws.has(t.lastSecondLetter.literal))){const e=Oa.get(t.lastSecondLetter.literal+t.lastLetter.literal);if(e&&e.length>0){return e.filter((e=>e.tonal.toString()===t.lastLetter.literal))[0]}return new d}if(Ma.has(t.lastLetter.literal)){const e=Ma.get(t.lastLetter.literal);return e||new d}return new He}}class no extends L{constructor(t,e){super(),this.syllable=t,this.sounds=e}get lastSecondLetter(){return this.sounds[this.sounds.length-2].toString()}insertNasal(e){if(e&&e.name===t.TonalSoundTags.nasalFinalConsonant){const t=this.sounds;return t.splice(0,0,e),[new Nr(t.map((t=>new s(t.characters))))]}return[]}infect(){const e=Dt.sounds[0];if(e&&e.name===t.TonalSoundTags.nasalization){const a=this.sounds;return a[a.length-1].name===t.TonalSoundTags.freeTone?a.splice(a.length-1,0,e):a[a.length-1].name===t.TonalSoundTags.vowel&&a.push(e),[new Nr(a.map((t=>new s(t.characters))))]}return[]}mutateInitialConsonant(e){if(e&&e.name===t.TonalSoundTags.initialConsonant){const a=this.sounds;if(a[0].toString()===e.toString()){const e=new Nr(this.sounds.map((t=>new s(t.characters))));return e.replaceLetter(0,S.get(t.TonalLetterTags.l)),[e]}return[new Nr(a.map((t=>new s(t.characters))))]}return[]}mutateFinalConsonant(e){if(e){const e=this.sounds,a=new Nr(this.sounds.map((t=>new s(t.characters)))),n=e.findIndex((e=>e.name===t.TonalSoundTags.stopFinalConsonant));return a.replaceLetter(n,S.get(t.TonalLetterTags.gg)),[a]}return[]}changeFinalTTt(e){if(this.sounds[this.sounds.length-2].toString()===t.TonalLetterTags.tt&&Object.values(Ms).includes(e.toString())||this.sounds[this.sounds.length-2].toString()===t.TonalLetterTags.t&&Object.values(vs).includes(e.toString())){const a=new Nr(this.sounds.map((t=>new s(t.characters))));let n=Ps.get(this.sounds[this.sounds.length-2].toString()+e.toString());if(n||e.toString()!==t.TonalLetterTags.j||(n=Ps.get(this.sounds[this.sounds.length-2].toString()+this.sounds[this.sounds.length-1]+e.toString())),n)return a.replaceLetter(a.letters.length-2,S.get(n)),ys.includes(e.toString())&&a.insertLetter(a.letters.length-2,new s(e.characters)),[a]}return[]}changeFinalHHh(t){return[]}changeFinalPPp(t){return[]}changeWithInitialMnng(e){return e.name===t.TonalSoundTags.initialConsonant&&ys.includes(e.toString())?this.voicedFinal():[]}changeWithMedial(e){return e.name===t.TonalSoundTags.vowel&&Rt.includes(e.toString())?this.voicedFinal():[]}changeWithInitialBghjl(e){return e.name===t.TonalSoundTags.initialConsonant&&Os.includes(e.toString())?this.voicedFinal():[]}changeFinalPtkppttkk(t){const e=this.changeFinalTTt(t);if(e.length>0)return e;const a=this.changeFinalHHh(t);if(a.length>0)return a;const n=this.changeFinalPPp(t);if(n.length>0)return n;const s=this.changeWithInitialMnng(t);if(s.length>0)return s;const r=this.changeWithMedial(t);if(r.length>0)return r;const g=this.changeWithInitialBghjl(t);return g.length>0?g:void 0}changeFinalN(e){if(this.sounds[this.sounds.length-2].name!=t.TonalSoundTags.stopFinalConsonant&&this.sounds[this.sounds.length-2].name!=t.TonalSoundTags.nasalFinalConsonant)return[];if(e.toString()===t.TonalLetterTags.b&&this.sounds[this.sounds.length-2].toString()===t.TonalLetterTags.n){const e=new Nr(this.sounds.map((t=>new s(t.characters))));return e.replaceLetter(e.letters.length-2,S.get(t.TonalLetterTags.m)),[e]}return[]}voicedFinal(){const t=Is.get(this.sounds[this.sounds.length-2].toString());if(t){const e=new Nr(this.sounds.map((t=>new s(t.characters))));return e.replaceLetter(e.letters.length-2,S.get(t)),[e]}return[]}}class so extends Lg{constructor(t){super(),this.metaplasm=t}createArray(){return new Array}createMorpheme(t){return new ao(new Nr(t.letters),t.pattern,this.metaplasm)}postprocess(t){let e=this.createArray();for(let a in t)e.push(this.createMorpheme(t[a]));return e}makeMorphemes(t){const e=t.map((t=>t.letter)),a=this.make(e,Fg);return this.postprocess(a)}}class ro extends Lg{constructor(){super()}createArray(){return new Array}createMorpheme(t){return new no(new Nr(t.letters),t.pattern)}postprocess(t){const e=this.createArray();for(let a in t)e.push(this.createMorpheme(t[a]));return e}makeMorphemes(t){const e=t.map((t=>t.letter)),a=this.make(e,Fg);return this.postprocess(a)}}class go extends w{constructor(t,e){super(),this.forms=new Array,0==t.length?this.word=new Rr([]):this.word=new Rr(t.map((t=>t.syllable))),t.length>0&&t[t.length-1]?this.endingAllomorphic=this.assignAllomorphicEnding(t[t.length-1].allomorph):this.endingAllomorphic=new Dr,t.length>0&&(this.forms=this.assignWordForms(t,e))}assignAllomorphicEnding(t){let e=new Dr;if(t instanceof k){let a=new Hr;a.allomorph=t,e=a}else if(t instanceof f){let a=new Br;a.allomorph=t,e=a}return e}getInflectionalEnding(){return this.endingAllomorphic?this.endingAllomorphic.allomorph.tonal.toString():""}getAllomorphicEnding(){return this.endingAllomorphic?this.endingAllomorphic:""}assignWordForms(t,e){return e.apply(t)}getForms(){return this.forms}}class oo{constructor(t,e){this.morphemes=t,this.forms=new Array,0==t.length?this.word=new Rr([]):this.word=new Rr(t.map((t=>t.syllable))),t.length>0&&(this.forms=e.apply(t))}getForms(){return this.forms}insertWith(e){const a=new Rr(this.morphemes.map((t=>new Nr(t.syllable.letters))));if(e.morphemes.length>0){const n=e.morphemes[e.morphemes.length-1].sounds;let s=new l;n[n.length-1].name===t.TonalSoundTags.freeTone&&n[n.length-2].name===t.TonalSoundTags.nasalFinalConsonant?s=n[n.length-2]:n[n.length-1].name===t.TonalSoundTags.nasalFinalConsonant&&(s=n[n.length-1]);const r=this.morphemes[0].insertNasal(s);return a.replaceSyllable(0,r[0]),[a]}return[]}}class lo{constructor(t,e){this.morphemes=t,this.forms=new Array,0==t.length?this.word=new Rr([]):this.word=new Rr(t.map((t=>t.syllable))),t.length>0&&(this.forms=e.apply(t))}getForms(){return this.forms}mutateWith(e){const a=new Rr(this.morphemes.map((t=>new Nr(t.syllable.letters))));if(e.morphemes.length>0){const n=e.morphemes[e.morphemes.length-1].sounds;if(n[0].name===t.TonalSoundTags.initialConsonant){const t=n[0],e=this.morphemes[this.morphemes.length-1].changeFinalPtkppttkk(t);return e&&e.length>0&&(a.popSyllable(),a.pushSyllable(e[0])),[a]}}return[]}}class io extends ug{constructor(t){super(),this.metaplasm=t}makeLexemes(t){return this.make(t)}make(t){let e=!1;return t&&(e=this.checkFifth(t),e)?new go([],this.metaplasm):new go(t,this.metaplasm)}checkFifth(e){for(let a=0;a<e.length;a++)if(e[a]&&e[a].syllable.lastLetter.literal===t.TonalLetterTags.x&&a<e.length-1&&!e[e.length-1].isAy()){if(e[e.length-1].syllable.lastLetter.literal===t.TonalLetterTags.a)break;return!0}return!1}}class To extends br{apply(e,a){if(a){let n=new Nr(e.map((t=>new s(t.characters))));if(a instanceof k){if(a instanceof He){const e=Ss.get(t.TonalLetterTags.zero);return e&&n.pushLetter(new s(S.get(e[0]).characters)),[n]}if(a instanceof _e)return n.popLetter(),[n];{n.popLetter();const t=Ss.get(a.tonal.toString()),e=[];if(t)for(let a=0;a<t.length;a++)n.pushLetter(new s(S.get(t[a]).characters)),e.push(new Nr(n.letters)),n.popLetter();return e}}if(a instanceof f){if(a.tonal.toString().length>0)return[];const t=Ss.get(a.final.toString()),e=[];if(t)for(let r=0;r<t.length;r++){if(2==a.final.toString().length){n.popLetter();const t=Ds.get(a.final.toString());t&&n.pushLetter(S.get(t))}n.pushLetter(new s(S.get(t[r]).characters)),e.push(new Nr(n.letters)),n.popLetter()}return e}}return[]}}class ho extends br{apply(e,a){if(a){const n=new Nr(e.map((t=>new s(t.characters))));return a instanceof k?(a instanceof He||n.popLetter(),n.pushLetter(S.get(t.TonalLetterTags.w))):a instanceof f&&(a.tonal.toString()?(n.popLetter(),n.pushLetter(S.get(t.TonalLetterTags.w))):n.pushLetter(S.get(t.TonalLetterTags.w))),[n]}return[]}}class co extends br{apply(e,a){if(a&&a instanceof f){let n=new Nr(e.map((t=>new s(t.characters))));const r=Es.get(a.toString());return r&&(n.popLetter(),n.pushLetter(new s(S.get(r).characters)),n.pushLetter(new s(S.get(t.TonalLetterTags.f).characters))),[n]}return[]}}class Lo extends br{apply(e,a){if(a&&a instanceof f){let a=new Nr(e.map((t=>new s(t.characters))));return a.popLetter(),a.pushLetter(new s(S.get(t.TonalLetterTags.h).characters)),a.pushLetter(new s(S.get(t.TonalLetterTags.y).characters)),[a]}return[]}}class uo extends br{apply(e,a){if(a){let n=new Nr(e.map((t=>new s(t.characters))));if(a instanceof k&&a instanceof He){const e=Ss.get(t.TonalLetterTags.zero);return e&&n.pushLetter(new s(S.get(e[0]).characters)),[n]}}return[]}}class po extends br{constructor(t){super(),this.tone=t}toThird(e,a){let n=new Nr(e.letters);return n.pushLetter(S.get(t.TonalLetterTags.w)),n}toFirst(e){let a=new Nr(e.letters);return a.pushLetter(S.get(t.TonalLetterTags.f)),a}toSeventh(e){let a=new Nr(e.letters);return a.popLetter(),a.pushLetter(S.get(t.TonalLetterTags.z)),a}apply(e,a){if(a){let n=new Nr(e.map((t=>new s(t.characters))));if(a instanceof f){const a=[];let s=new Nr([]);return this.tone===t.TonalLetterTags.f?s=this.toFirst(n):this.tone===t.TonalLetterTags.w?s=this.toThird(n,e[e.length-1].toString()):this.tone===t.TonalLetterTags.z&&(s=this.toSeventh(n)),a.push(s),a}}return[]}}class wo extends br{apply(e,a){if(a){let n=new Nr(e.map((t=>new s(t.characters))));if(a instanceof k&&(a.tonal.toString()===t.TonalLetterTags.z||a.tonal.toString()===t.TonalLetterTags.w))return n.popLetter(),[n]}return[]}}class Ko extends br{apply(e,a){if(a){let a=new Nr(e.map((t=>new s(t.characters))));return a.popLetter(),a.pushLetter(new s(S.get(t.TonalLetterTags.w).characters)),[a]}return[]}}class mo extends br{constructor(t){super(),this.tone=t}apply(e,a){if(a){let a=new Nr(e.map((t=>new s(t.characters))));return a.lastLetter.literal===t.TonalLetterTags.h&&a.popLetter(),this.tone===t.TonalLetterTags.z?a.pushLetter(new s(S.get(t.TonalLetterTags.z).characters)):this.tone===t.TonalLetterTags.zero&&e[e.length-1].toString()===t.TonalLetterTags.t&&a.pushLetter(new s(S.get(t.TonalLetterTags.f).characters)),[a]}return[]}}class ko extends vr{apply(t){if(t.length>0&&t[t.length-1]){const e=t[t.length-1].getForms();let a=[];if(e)for(let n in e){let s=new Rr(t.map((t=>new Nr(t.syllable.letters))));s.popSyllable(),s.pushSyllable(e[n]),a.push(s)}return a}return[]}}class fo extends vr{apply(t){const e=[];if(t.length>0){const a=new Rr(t.map((t=>new Nr(t.syllable.letters))));for(let e=0;e<t.length;e++){const n=t[e].getForms()[0];n&&a.replaceSyllable(e,n)}e.push(a)}return e}}class yo extends Pr{apply(e){if(e.length>1&&e[e.length-2]){const a=e[e.length-2].sounds,n=new Rr(e.map((t=>new Nr(t.syllable.letters))));if(a[a.length-2].name==t.TonalSoundTags.nasalFinalConsonant&&e[e.length-1].syllable.letters[0].literal===t.TonalLetterTags.a)return n.popSyllable(),n.pushSyllable(e[e.length-1].insertNasal(a[a.length-2])[0]),[n]}return[]}}class xo extends Ir{apply(t,e){if(""===t.word.literal||""===e.word.literal)return[];if(e.getForms().length>0){const a=e.getForms(),n=[];return a.map((e=>n.push(new _r([t.getForms()[0],e])))),n}return t.getForms().length>0?[new _r([t.getForms()[0],e.word])]:[new _r([])]}}class So extends Vr{apply(t,e,a){return""===t.word.literal||""===e.word.literal||""===a.word.literal?[]:e.getForms().length>0||a.getForms().length>0?[new _r([t.getForms()[0],e.getForms()[0],a.getForms()[0]])]:[new _r([])]}}class zo extends Vr{apply(t,e,a){return""===t.word.literal||""===e.word.literal||""===a.word.literal?[]:t.getForms().length>0?[new _r([t.getForms()[0],e.word,a.word])]:[new _r([])]}}class bo extends Ir{apply(t,e){if(""===t.word.literal||""===e.word.literal)return[];if(e.getForms().length>0){const a=e.getForms(),n=[];return t.getForms().length>0?a.map((e=>n.push(new _r([t.getForms()[0],e])))):a.map((e=>n.push(new _r([t.word,e])))),n}return[new _r([])]}}class Co extends Vr{apply(t,e,a){if(""===t.word.literal||""===e.word.literal||""===a.word.literal)return[];if(e.getForms().length>0&&a.getForms().length>0){const n=[];return t.getForms().length>0&&n.push(new _r([t.getForms()[0],e.getForms()[0],a.getForms()[0]])),n}return[new _r([])]}}class jo extends Ir{apply(t,e){return""===t.word.literal||""===e.word.literal?[]:e.getForms().length>0?[new _r([t.word,e.getForms()[0]])]:[new _r([])]}}class Fo extends Ir{apply(t,e){return""===t.word.literal||""===e.word.literal?[]:e.getForms().length>0?[new _r([t.getForms()[0],e.getForms()[0]])]:t.getForms().length>0?[new _r([t.getForms()[0],e.word])]:[new _r([])]}}class Ao extends Or{apply(e){let a=new Rr(e.map((t=>new Nr(t.syllable.letters))));if(e.length>1)for(let n=1;n<e.length;n++)if(e[n].sounds[0].name!==t.TonalSoundTags.initialConsonant||e[n-1].lastSecondLetter!==t.TonalLetterTags.t&&e[n-1].lastSecondLetter!==t.TonalLetterTags.tt)if(e[n].sounds[0].toString()===t.TonalLetterTags.b&&e[n-1].lastSecondLetter===t.TonalLetterTags.n){const t=e[n-1].changeFinalN(e[n].sounds[0]);t&&t.length>0&&a.replaceSyllable(n-1,t[0])}else{const t=e[n-1].changeFinalPtkppttkk(e[n].sounds[0]);t&&t.length>0&&a.replaceSyllable(n-1,t[0])}else{const t=e[n-1].changeFinalPtkppttkk(e[n].sounds[0]);t&&t.length>0&&a.replaceSyllable(n-1,t[0])}return[a]}}const vo={morphAnalyze(t,e){let a=[];"object"==typeof t?a=t:"string"==typeof t&&(a=Mg(t));return new so(e).makeMorphemes(a)},lexAnalyze(t,e){let a=[];"object"==typeof t?a=t:"string"==typeof t&&(a=this.morphAnalyze(t,new To));return new io(e).makeLexemes(a)}};var Mo;!function(t){t.a="a",t.e="e",t.i="i",t.o="o",t.u="u",t.oe="oe",t.er="er",t.ir="ir",t.ur="ur",t.b="b",t.d="d",t.g="g",t.j="j",t.ch="ch",t.p="p",t.t="t",t.k="k",t.c="c",t.ph="ph",t.th="th",t.kh="kh",t.pp="pp",t.tt="tt",t.kk="kk",t.ss="ss",t.jj="jj",t.h="h",t.l="l",t.s="s",t.w="w",t.y="y",t.m="m",t.n="n",t.ng="ng",t.gs="gs",t.nj="nj",t.lg="lg",t.lm="lm",t.lb="lb",t.ls="ls",t.lt="lt",t.lp="lp",t.lh="lh",t.bs="bs"}(Mo||(Mo={}));const Po=new class extends g{}([Mo.a,Mo.e,Mo.i,Mo.o,Mo.u,Mo.oe,Mo.er,Mo.ir,Mo.ur,Mo.b,Mo.d,Mo.g,Mo.j,Mo.ch,Mo.p,Mo.t,Mo.k,Mo.c,Mo.ph,Mo.th,Mo.kh,Mo.pp,Mo.tt,Mo.kk,Mo.ss,Mo.jj,Mo.h,Mo.l,Mo.s,Mo.w,Mo.y,Mo.m,Mo.n,Mo.ng,Mo.gs,Mo.nj,Mo.lg,Mo.lm,Mo.lb,Mo.ls,Mo.lt,Mo.lp,Mo.lh,Mo.bs]);var Oo,Eo,Io,Vo;!function(t){t.initialConsonant="initialConsonant",t.semivowel="semivowel",t.vowel="vowel",t.finalConsonant="finalConsonant"}(Oo||(Oo={}));class No extends m{constructor(t,e,a){super(),this.forms=new Array,this.phrase=new _r([t.word,e.word]),this.forms=a.apply(t,e)}getForms(){return this.forms}}class Wo extends m{constructor(t,e,a,n){super(),this.forms=new Array,this.phrase=new _r([t.word,e.word,a.word]),this.forms=n.apply(t,e,a)}getForms(){return this.forms}}class qo extends m{constructor(t,e){super(),this.phrase=new _r([t.getForms()[0],e.word])}}class Go extends m{constructor(t,e,a){super(),this.forms=new Array,this.phrase=new _r([t.word,e.word]),this.forms=a.apply(t,e)}getForms(){return this.forms}}class Uo extends m{constructor(t){super(),this.forms=new Array;const e=[];for(let a=0;a<t.length-1;a++)t[a].getForms().length>0&&t[a].getForms()[0]&&e.push(t[a].getForms()[0]);t[t.length-1]&&t[t.length-1].word.literal.length>0&&e.push(t[t.length-1].word),this.phrase=new _r(e);const a=t.filter((t=>t.getForms().length>0&&t.getForms()[0])).map((t=>t.getForms()[0]));a.length>0?this.forms=[new _r(a)]:this.forms=[]}getForms(){return this.forms}}class Do{makePhrasalVerbPhraseme(t,e){return new No(t,e,new xo)}makePhrasalVerbVppPhraseme(t,e,a){return new Wo(t,e,a,new So)}makeTransitiveVppPhraseme(t,e,a){return new Wo(t,e,a,new zo)}makeCompoundPhraseme(t,e){return new qo(t,e)}makeAdjectivePhraseme(t,e){return new Go(t,e,new jo)}makeConjunctivePhraseme(t,e){return new Go(t,e,new Fo)}makePossesivePhraseme(t,e){return new Go(t,e,new jo)}makeParticiplePhraseme(t,e){return new No(t,e,new bo)}makeVppParticiplePhraseme(t,e,a){return new Wo(t,e,a,new Co)}makeSerialPhraseme(t){return new Uo(t)}}function Ho(t,e){const a=vo,n=e?a.morphAnalyze(t,e):a.morphAnalyze(t,new Cr);return a.lexAnalyze(n,new ko)}function Bo(t){const e=vo,a=e.morphAnalyze(t,new To);return e.lexAnalyze(a,new ko)}function Ro(t){const e=vo,a=e.morphAnalyze(t,new uo);return e.lexAnalyze(a,new ko)}function _o(t,e){const a=vo,n=a.morphAnalyze(t,new po(e));return a.lexAnalyze(n,new ko)}function Jo(t){const e=vo,a=e.morphAnalyze(t,new wo);return e.lexAnalyze(a,new ko)}function Qo(t){const e=vo,a=e.morphAnalyze(t,new Ko);return e.lexAnalyze(a,new ko)}function Xo(t,e){const a=vo,n=a.morphAnalyze(t,new mo(e));return a.lexAnalyze(n,new ko)}!function(t){t.longy="longy",t.bez="bez"}(Eo||(Eo={})),Eo.bez.toString(),Eo.longy.toString(),function(t){t.guay="guay",t.liy="liy",t.i="i",t.guny="guny",t.guany="guany",t.lany="lany",t.liny="liny",t.in="in"}(Io||(Io={})),Io.guay.toString(),Io.liy.toString(),Io.i.toString(),Io.guny.toString(),Io.guany.toString(),Io.lany.toString(),Io.liny.toString(),Io.in.toString(),function(t){t.cut="cut",t.khih="khih",t.laih="laih",t.tiurh="tiurh"}(Vo||(Vo={})),Vo.cut.toString(),Vo.khih.toString(),Vo.laih.toString(),Vo.tiurh.toString();class Yo{constructor(){this.toneLetters=[],this.stopFinals=[]}getInflectionalEnding(){return this.toneLetters[this.toneLetters.length-1]}getAllomorphicEnding(){return this.stopFinals[this.stopFinals.length-1]+this.toneLetters[this.toneLetters.length-1]}getToneNumbers(){const e=[];for(let a=0;a<this.toneLetters.length;a++)""===this.toneLetters[a]&&""===this.stopFinals[a]?e.push(1):""===this.toneLetters[a]&&""!==this.stopFinals[a]?1==this.stopFinals[a].length?e.push(4):2==this.stopFinals[a].length&&e.push(8):""!==this.toneLetters[a]&&(this.toneLetters[a]===t.TonalLetterTags.f&&e.push(1),this.toneLetters[a]===t.TonalLetterTags.y&&e.push(2),this.toneLetters[a]===t.TonalLetterTags.w&&e.push(3),this.toneLetters[a]===t.TonalLetterTags.x&&e.push(5),this.toneLetters[a]===t.TonalLetterTags.z&&e.push(7),this.toneLetters[a]===t.TonalLetterTags.xx&&e.push(9));return e}}function Zo(e){const a=p(Mg(e).map((t=>t.letter)),Fg),n=new Yo,s=a.map((t=>t.pattern)),r=s.map((e=>e.map((e=>e.name===t.TonalSoundTags.stopFinalConsonant?e.toString():"")).filter((t=>t.length>0)))),g=s.map((e=>e.map((e=>e.name===t.TonalSoundTags.freeTone||e.name===t.TonalSoundTags.checkedTone?e.toString():"")).filter((t=>t.length>0))));return r.map((t=>t.length>0?n.stopFinals.push(t[0]):n.stopFinals.push(""))),g.map((t=>t.length>0?n.toneLetters.push(t[0]):n.toneLetters.push(""))),n}function $o(e){const a=Zo(e);if(""===a.getInflectionalEnding()&&""===a.getAllomorphicEnding())return 1;if(""===a.getInflectionalEnding()&&""!==a.getAllomorphicEnding()){if(1==a.getAllomorphicEnding().length)return 4;if(2==a.getAllomorphicEnding().length)return 8}if(""!==a.getInflectionalEnding()){if(a.getInflectionalEnding()===t.TonalLetterTags.f)return 1;if(a.getInflectionalEnding()===t.TonalLetterTags.y)return 2;if(a.getInflectionalEnding()===t.TonalLetterTags.w)return 3;if(a.getInflectionalEnding()===t.TonalLetterTags.x)return 5;if(a.getInflectionalEnding()===t.TonalLetterTags.z)return 7;if(a.getInflectionalEnding()===t.TonalLetterTags.xx)return 9}return-1}return t.AlphabeticGrapheme=n,t.Client=class{processKana(e){us.size!==Na.size&&console.log("sizes unmatched");let a=new eo;if(e){const n=to.morphAnalyze(e);a.blockSequences=function(e){const a=[];a[0]="",a[1]="",a[2]="";let n="";for(const g of e){let o=Eg(g.syllable.literal);if(null!=o&&null!=o[0]){if(a[0]+=o[0],a[1]+=o[1],n.length>0&&((s=n[n.length-1])===(r=g.syllable.literal[g.syllable.literal.length-1])||s===t.KanaLetterTags.e&&r===t.KanaLetterTags.i||s===t.KanaLetterTags.o&&r===t.KanaLetterTags.u)&&0==En.includes(g.syllable.literal)&&1==g.syllable.literal.length?a[2]+="ー":a[2]+=o[1],1==e.length){const t=Ig(g.syllable.literal);t&&(t[0]&&a.push(t[0]),t[1]&&a.push(t[1]))}}else if(1==Wn.includes(g.syllable.literal[g.syllable.literal.length-1]))o=Eg(g.syllable.literal.substring(0,g.syllable.literal.length-1)),null!=o&&null!=o[0]&&(a[0]+=o[0],a[1]+=o[1],a[2]+=o[1]),qn.includes(g.syllable.literal[g.syllable.literal.length-1])?(o=ws.get("n"),o&&(a[0]+=o[0],a[1]+=o[1],a[2]+=o[1])):(o=ps.get("chu"),o&&(a[0]+=o[0],a[1]+=o[1],a[2]+=o[1]));else{let e=g.syllable.literal[0];if(e===g.syllable.literal[1]&&1==Vn.includes(e)){const t=Og(g.sounds[1].toString()+g.sounds[2].toString());a[0]+=t[0],a[1]+=t[1],a[2]+=t[1]}else if(g.sounds[0].toString()===t.KanaLetterTags.t&&g.sounds[1].toString()===t.KanaLetterTags.ch&&1==Vn.includes(g.sounds[0].toString())){const t=Og(g.sounds[1].toString()+g.sounds[2].toString());a[0]+=t[0],a[1]+=t[1],a[2]+=t[1]}}n=g.syllable.literal}var s,r;return a[1]===a[2]&&(a[2]=""),a}(n);for(const t of n)a.soundSequences.push(t.sounds)}return a}processTonal(t){De.size!==S.size&&console.log("sizes unmatched");let e=new eo;if(t){const a=Pg,n=a.morphAnalyze(t,new og([])),s=a.lexAnalyze(n);e.word=s.word,e.lemmas=s.getLemmas(),e.inflectionalEnding=s.getInflectionalEnding(),e.blockSequences=Ys(n);for(const t of n)e.soundSequences.push(t.sounds),e.uncombiningSequences.push(t.getForms().map((t=>t.literal)))}return e}},t.GraphemeMaker=o,t.KanaUncombiningMorpheme=Xg,t.LexicalTone=Yo,t.PhrasalVerbPhraseme=No,t.PhrasalVerbVppPhraseme=Wo,t.SerialPhraseme=Uo,t.Sound=l,t.SoundGeneration=h,t.TokenAnalysis=eo,t.TonalCombiningForms=To,t.TonalCombiningMorpheme=ao,t.TonalCompoundPhraseme=qo,t.TonalDesinenceInflection=ko,t.TonalInflectionLexeme=go,t.TonalInsertionLexeme=oo,t.TonalLemmatizationLexeme=pg,t.TonalMainParticlePhraseme=Go,t.TonalPhrase=_r,t.TonalUncombiningMorpheme=Ag,t.TonalWord=Rr,t.createCompoundPhraseme=function(t,e){const a=vo,n=new Do,s=a.lexAnalyze(t,new ko),r=Ho(e);return n.makeCompoundPhraseme(s,r)},t.createTonalInflectionLexeme=Ho,t.createTonalPhrase=function(t){const e=vo,a=t.match(/\w+/g),n=a?a.map((t=>e.lexAnalyze(t,new Mr))):[];return new _r(n.map((t=>t.word)))},t.extractTones=Zo,t.getLatinSyllableCompositions=function(t){const e=new Array,a=Mg(t).map((t=>t.letter&&t.letter.literal));let n=0;for(;n<a.length;){const t=new Array;let s=!1;for(let e=0;e<a.length;e++){for(let r=0;r<Cg.length&&!s;r++)if(e+1>n){let g=new h;if(g.letters=a.slice(n,e+1),Bs.includes(g.letters[e])&&e>0&&Rt.includes(g.letters[e-1])){s=!0;break}g=Cg[r](g),g.letters.length==g.matchedSounds.length&&1==g.matching&&t.push(g.matchedSounds)}e+1==a.length&&t.length>0&&n+t[t.length-1].length<=a.length&&(n+=t[t.length-1].length)}if(0==t.length)break;t.length>0&&e.push(t)}return e.map((t=>t.map((t=>t))))},t.getToneEndingNumber=$o,t.getToneEndingNumbersThree=function(t,e,a){return[$o(t),$o(e),$o(a)]},t.getToneEndingNumbersTwo=function(t,e){return[$o(t),$o(e)]},t.graphAnalyzeHangul=function(t){return new o(Po).makeGraphemes(t)},t.graphAnalyzeKana=$g,t.graphAnalyzeTonal=Mg,t.inflectDesinence=Bo,t.inflectEToAdnominal=function(t,e){const a=new Do,n=Ho(t),s=Ro(e);return a.makeAdjectivePhraseme(n,s)},t.inflectEighthToFirst=function(t){const e=vo,a=e.morphAnalyze(t,new co);return e.lexAnalyze(a,new ko)},t.inflectEighthToSecond=function(t){const e=vo,a=e.morphAnalyze(t,new Lo);return e.lexAnalyze(a,new ko)},t.inflectEncliticE=Ro,t.inflectEncliticLe=Jo,t.inflectLeToConjunctive=function(t,e){const a=new Do,n=Bo(t),s=Jo(e);return a.makeConjunctivePhraseme(n,s)},t.inflectPhrasalVerbParticle=_o,t.inflectPossesive=function(t,e){const a=new Do,n=Ho(t),s=Qo(e);return a.makePossesivePhraseme(n,s)},t.inflectPossesiveEx=Qo,t.inflectSerial=function(...t){const e=new Do,a=t.map((t=>Bo(t)));return e.makeSerialPhraseme(a)},t.inflectTo=Xo,t.inflectToParticiple=function(t,e,a){const n=new Do,s=Xo(t,a),r=Xo(e,a);return n.makeParticiplePhraseme(s,r)},t.inflectToProceeding=function(e,a){const n=new Do,s=Bo(e);let r=Ho("");return r=a===Vo.khih?_o(a,t.TonalLetterTags.f):_o(a,t.TonalLetterTags.w),n.makePhrasalVerbPhraseme(s,r)},t.inflectTransfix=function(t){const e=vo,a=e.morphAnalyze(t,new ho);return e.lexAnalyze(a,new fo)},t.inflectVppToParticiple=function(t,e,a,n){const s=new Do,r=Xo(t,n),g=Xo(e,n),o=Xo(a,n);return s.makeVppParticiplePhraseme(r,g,o)},t.inflectVppToProceeding=function(e,a,n){const s=new Do,r=Bo(e);let g=Ho(""),o=Ho("");return a===Vo.cut&&n===Vo.khih?(g=_o(a,t.TonalLetterTags.f),o=_o(n,t.TonalLetterTags.f)):a===Vo.khih&&n===Vo.laih&&(g=_o(a,t.TonalLetterTags.f),o=_o(n,t.TonalLetterTags.z)),s.makePhrasalVerbVppPhraseme(r,g,o)},t.inflectVppToTransitive=function(t,e,a){const n=new Do,s=Bo(t),r=Bo(e),g=Bo(a);return n.makeTransitiveVppPhraseme(s,r,g)},t.initialConsonantsTonal=Jt,t.insertToFollowingSyllable=function(t){const e=new ro,a=new o(S).makeGraphemes(t),n=e.makeMorphemes(a);return new oo(n,new yo)},t.kanaLemmatizationAnalyzer=to,t.lemmatize=function(t){const e=Pg.morphAnalyze(t,new og([]));return Pg.lexAnalyze(e)},t.lowerLettersTonal=S,t.mutateFinalConsonantOfPrecedingSyllable=function(t){const e=function(t){const e=Mg(t);return(new ro).makeMorphemes(e)}(t);return new lo(e,new Ao)},t.nasalizationsTonal=Dt,t.predict=function(t){const e=new Array;for(let a=0;a<Cg.length;a++){let n=new h;n.predictive=!0,n.letters=t,n=Cg[a](n),n.letters.length==n.matchedSounds.length&&1==n.matching||n.predictions.map((t=>e.push(t)))}const a=new Array;return e.map((t=>t.map((t=>a.push([t.toString(),t.name]))))),a.reduce((function(t,e){return 0==t.filter((t=>t[0]===e[0])).length&&t.push(e),t}),[]).filter((e=>Jr(t.join("")+e[0])))},t.syllableCompositions=Cg,t.tonalInflectionAnalyzer=vo,t.tonalLemmatizationAnalyzer=Pg,t.vowelsTonal=Rt,Object.defineProperty(t,"__esModule",{value:!0}),t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
